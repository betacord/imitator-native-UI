(************************************************************
 *                                IMITATOR MODEL
 *
 * Title            : Small example for exemplifying functions, side-effects and shadowing
 * Description      : Small example for exemplifying functions, side-effects and shadowing
 * Correctness      : N/A
 * Scalable         : no
 * Generated        : no
 * Categories       : N/A
 * Source           : Own work
 * bibkey           : 
 * Author           : Benjamin Loillier, Étienne André
 * Modeling         : Benjamin Loillier, Étienne André
 * Input by         : Étienne André
 * License          : Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
 *
 * Created          : 2022?
 * Last modified    : 2023/03/14
 * Model version    : 0.1
 *
 * IMITATOR version : 3.4-beta
 ************************************************************)

var
	my_global_i : int;

(************************************************************)
(*Functions *)
(************************************************************)

(* This function modifies a global variable: it is side-effect *)
function modif_global() : int
begin
	my_global_i := 0;
	return 0
end

(* This function modifies the content of an array passed as an argument: it is side-effect  *)
function modif_array(a : int array(2)) : int
begin
	a[1] := 0;
	return a[0]
end

(* This function shadows a local variable, a global variable and a function argument *)
function shadow_variables(i : rat) : int
begin
	(* Local variable my_global_i shadows global variable of the same name *)
	var my_global_i : int = 4;
	var a : int = 0;
	(* a shadows previous declaration and is now equal to 5 *)
	var a : int = 5;
	(* i (int) shadows argument i (rat) *)
	var i : int = 3;
	(* Returns 3 + 5 + 4 = 12 *)
	return i + a + my_global_i
end

(* This function calls another function *)
function call_other_function() : int
begin
	return shadow_variables(0) + shadow_variables(1)
end

(************************************************************)
  automaton A
(************************************************************)
loc l1: invariant True
	when my_global_i < 1 do {modif_global(); modif_array([1,2]); call_other_function(); my_global_i := my_global_i + 1} goto l1;

end (* A *)


(************************************************************)
(* Initial state *)
(************************************************************)

init := {
	
    discrete =
		(*------------------------------------------------------------*)
		(* Initial location *)
		(*------------------------------------------------------------*)
		loc[A] := l1,

		(*------------------------------------------------------------*)
		(* Initial discrete variables assignments *)
		(*------------------------------------------------------------*)
		my_global_i := 0,
    ;

    continuous =
		True
		(*------------------------------------------------------------*)
		(* Initial clock constraints *)
		(*------------------------------------------------------------*)

		(*------------------------------------------------------------*)
		(* Parameter constraints *)
		(*------------------------------------------------------------*)
	;
}


(************************************************************)
(* The end *)
(************************************************************)
end
