(************************************************************
 *                         IMITATOR
 *
 * Model of a pacemaker
 *
 * "Modeling and Verification of a Dual Chamber Implantable Pacemaker"
 * Zhihao Jiang, Miroslav Pajic, Salar Moarref, Rajeev Alur, Rahul Mangharam
 * TACAS 2014
 *
 * Author          : Étienne André
 * Created         : 2015/02/11
 * Last modified   : 2024/02/22
 * IMITATOR version: 3.1
 ************************************************************)

var
	(* local clocks *)
	t_AVI, t_LRI, t_PVARP, t_VRP, t_5a,
	(* global clocks *)
	clk, x, x_urgent
		: clock;

	TAVI		= 150,
	TLRI		= 1000,
	TPVARP		= 100,
	TVRP		= 150,
	TURI		= 400,
	TPVAB		= 50,
	Aminwait	= 0,(* (random value)*)
	Amaxwait	= 1000,(* (random value)*)

		: parameter;

	(* Hack to test another PTA's location *)
	AVIisIdle, PVARPisIdle
		: bool;



(************************************************************)
  automaton LRI
(************************************************************)
actions: AP, AS, VP, VS;

loc LRI: invariant t_LRI <= TLRI - TAVI
	when True sync VP do {t_LRI := 0} goto LRI;
	when True sync VS do {t_LRI := 0} goto LRI;
	when t_LRI >= TLRI - TAVI sync AP do {t_LRI := 0} goto LRI;
	when True sync AS goto ASed;

loc ASed: invariant True
	when True sync VP do {t_LRI := 0} goto LRI;
	when True sync VS do {t_LRI := 0} goto LRI;

end (*LRI*)



(************************************************************)
  automaton AVI
(************************************************************)
actions: AP, AS, VP, VS;

loc Idle: invariant True
	when True sync AP do {t_AVI := 0, AVIisIdle := False} goto AVI;
	when True sync AS do {t_AVI := 0, AVIisIdle := False} goto AVI;

loc AVI: invariant t_AVI <= TAVI
	when True sync VS goto Idle;
	when t_AVI >= TAVI & clk >= TURI sync VP do {AVIisIdle := True} goto Idle;
	when t_AVI >= TAVI & clk < TURI goto WaitURI;

loc WaitURI: invariant clk <= TURI
	when True sync VS do {AVIisIdle := True} goto Idle;
	when clk >= TURI sync VP do {AVIisIdle := True} goto Idle;


end (*AVI*)



(************************************************************)
  automaton URI
(************************************************************)
actions: VP, VS;

loc URI: invariant True
	when True sync VP do {clk := 0} goto URI;
	when True sync VS do {clk := 0} goto URI;

end (*URI*)



(************************************************************)
  automaton PVARP
(************************************************************)
actions: AR, AS, Aget, VP, VS, PVARPbacktoIdle;

loc Idle: invariant True
	when True sync VP do {t_PVARP := 0, PVARPisIdle := False} goto PVAB;
	when True sync VS do {t_PVARP := 0, PVARPisIdle := False} goto PVAB;
	when True sync Aget do {t_PVARP := 0, PVARPisIdle := False} goto inter;

(* ------------------------------------------------------------ *)
(** COMMITTED **)
(*loc inter: invariant True
	when True sync AS goto Idle;*)

(* Replaced with the following gadget *)

loc inter: invariant t_PVARP = 0
	(* Easy case: loc[AVI] = idle: committed is urgent *)
	when AVIisIdle sync AS do {PVARPisIdle := True} goto Idle;
	(* Less easy case: loc[AVI] =!= idle: wait! *)
	when not(AVIisIdle) goto Wait;

loc Wait: invariant True
	when True sync VP do {t_PVARP := 0} goto Urgent;
	when True sync VS do {t_PVARP := 0} goto Urgent;

loc Urgent: invariant t_PVARP = 0
	when t_PVARP = 0 sync AS do {PVARPisIdle := True} goto Idle;

(* END gadget for committed *)
(* ------------------------------------------------------------ *)

loc PVAB: invariant t_PVARP <= TPVAB
	when t_PVARP >= TPVAB goto PVARP;

loc PVARP: invariant t_PVARP <= TPVARP
	when True sync Aget do {x_urgent := 0} goto inter1;
	when t_PVARP >= TPVARP do {PVARPisIdle := True} sync PVARPbacktoIdle goto Idle;

(** COMMITTED **)
(* In fact, urgent is OK because AR is not synchronized with anyone else *)
loc inter1: invariant x_urgent = 0
	when x_urgent = 0 sync AR goto PVARP;


end (*PVARP*)



(************************************************************)
  automaton VRP
(************************************************************)
actions: AP, AS, Aget, Vget, VP, VS, PVARPbacktoIdle;

loc Idle: invariant True
	when True sync Vget do {t_VRP := 0} goto inter;
	when True sync VP do {t_VRP := 0} goto VRP;
	(* To prevent blocking *)
	when True sync AP goto Idle;
	when True sync AS goto Idle;
	when True sync Aget goto Idle;

(* ------------------------------------------------------------ *)
(** COMMITTED **)
(*loc inter: invariant True
	when True sync VS do {t_VRP := 0} goto VRP;*)

loc inter: invariant t_VRP = 0
	(* Ready *)
	when not(AVIisIdle) & PVARPisIdle sync VS goto VRP;
	(* Not ready...*)
	when AVIisIdle & PVARPisIdle goto bNOKdOK;
	when not(AVIisIdle) & not(PVARPisIdle) goto bOKdNOK;
	when AVIisIdle & not(PVARPisIdle) goto bNOKdNOK;

(* AVI(b) not ready; PVARP(d) not ready *)
loc bNOKdNOK: invariant True
	when True sync AP goto bOKdNOK;
	when True sync AS do {t_VRP := 0} goto bOKdOK;
	when True sync PVARPbacktoIdle goto bNOKdOK;
	(* To prevent blocking *)
	when True sync Aget goto bNOKdNOK;

(* AVI(b) ready; PVARP(d) not ready *)
loc bOKdNOK: invariant True
	when True sync PVARPbacktoIdle do {t_VRP := 0} goto bOKdOK;
	when True sync AS goto bNOKdOK; (* hopefully correct! *)
	(* To prevent blocking *)
	when True sync Aget goto bOKdNOK;

(* AVI(b) not ready; PVARP(d) ready *)
loc bNOKdOK: invariant True
	when True sync AP do {t_VRP := 0} goto bOKdOK;
	when True sync Aget goto bNOKdNOK2;

(* AVI(b) not ready; PVARP(d) not ready *)
loc bNOKdNOK2: invariant True
	when True sync AS do {t_VRP := 0} goto bOKdOK;

(* AVI(b) ready; PVARP(d) ready: fire! *)
loc bOKdOK: invariant t_VRP = 0
	when t_VRP = 0 sync VS goto VRP;

(* END gadget for committed *)
(* ------------------------------------------------------------ *)

loc VRP: invariant t_VRP <= TVRP
	when t_VRP >= TVRP goto Idle;
	(* To prevent blocking *)
	when True sync AP goto VRP;
	when True sync AS goto VRP;
	when True sync Aget goto VRP;
	when True sync PVARPbacktoIdle goto VRP; (*(self loop to avoid deadlocking)*)


end (*VRP*)



(************************************************************)
  automaton RHM
(************************************************************)
actions: Aget, AP;

loc AReady: invariant x < Amaxwait
	when True sync AP do {x := 0} goto AReady;
	when x > Aminwait sync Aget do {x := 0} goto AReady;

end (*RHM*)


(************************************************************)
  automaton monitor5a
(*  figure 5a of the paper  *)
(************************************************************)
actions: VP, VS;

loc wait_1st: invariant True
	when True sync VP do {t_5a := 0} goto wait_2nd;
	when True sync VS do {t_5a := 0} goto wait_2nd;

loc wait_2nd: invariant True
	when True sync VP do {x_urgent := 0} goto two_a;
	when True sync VS do {x_urgent := 0} goto two_a;

loc two_a: invariant x_urgent = 0
	when x_urgent = 0 do {t_5a := 0} goto wait_2nd;
	when x_urgent = 0 && t_5a > TLRI do {t_5a := 0} goto monitor5a_BAD;

(* Sink location (stop time) *)
loc monitor5a_BAD: invariant x_urgent = 0

end (* monitor5a *)


(************************************************************)
(* Initial state *)
(************************************************************)

init := {
	discrete =
		(*------------------------------------------------------------
		   INITIAL LOCATION
		  ------------------------------------------------------------*)
		loc[LRI]			:= LRI,
		loc[AVI]			:= Idle,
		loc[URI]			:= URI,
		loc[PVARP]		:= Idle,
		loc[VRP]			:= Idle,
		loc[RHM]			:= AReady,
		loc[monitor5a]	:= wait_1st,


		(*------------------------------------------------------------
		   INITIAL DISCRETE
		  ------------------------------------------------------------*)
		AVIisIdle			:= True,
		PVARPisIdle		:= True,
	;

	continuous =
		(*------------------------------------------------------------
		   INITIAL CLOCKS
		  ------------------------------------------------------------*)
		& clk		= 0
		& x			= 0
		& x_urgent	= 0

		& t_AVI		= 0
		& t_LRI		= 0
		& t_PVARP	= 0
		& t_VRP		= 0
		& t_5a		= 0


		(*------------------------------------------------------------
		   PARAMETER CONSTRAINTS
		  ------------------------------------------------------------*)
		& TAVI		>= 0
		& TLRI		>= 0
		& TPVARP	>= 0
		& TVRP		>= 0
		& TURI		>= 0
		& TPVAB		>= 0
		& Aminwait	>= 0
		& Amaxwait	>= 0

		& Aminwait <= Amaxwait


		(*------------------------------------------------------------
		   PARAMETER VALUATION
		  ------------------------------------------------------------*)
		(*	& TAVI		= 150
		& TLRI		= 1000
		& TPVARP	= 100
		& TVRP		= 150
		& TURI		= 400
		& TPVAB		= 50*)
	;
}

end
