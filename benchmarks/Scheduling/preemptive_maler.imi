
var time: clock;
	 deadline: parameter;

	c1 : clock;
	wcet_m1_job1, wcet_m2_job1, wcet_m3_job1: parameter;

	c2: clock;
	wcet_m2_job2: parameter;

automaton checker

actions: DEADLINE, m3_j1_finished, m2_j2_finished, m1_j1_begin, m1_j1_finished, m2_j1_begin, m2_j1_finished, m3_j1_begin, m2_j2_begin;

loc nop: invariant time <= deadline
	when time <= deadline sync m3_j1_finished goto nop_1;
	when time <= deadline sync m2_j2_finished goto nop_1;

	when time <= deadline sync m1_j1_begin goto nop;
	when time <= deadline sync m1_j1_finished goto nop;
	when time <= deadline sync m2_j1_begin goto nop;
	when time <= deadline sync m2_j1_finished goto nop;
	when time <= deadline sync m3_j1_begin goto nop;
	when time <= deadline sync m1_j1_finished goto nop;
	when time <= deadline sync m2_j2_begin goto nop;

	when time = deadline sync DEADLINE goto error;

loc nop_1: invariant time <= deadline
	when time <= deadline sync m3_j1_finished goto finished;
	when time <= deadline sync m2_j2_finished goto finished;

	when time <= deadline sync m1_j1_begin goto nop_1;
	when time <= deadline sync m1_j1_finished goto nop_1;
	when time <= deadline sync m2_j1_begin goto nop_1;
	when time <= deadline sync m2_j1_finished goto nop_1;
	when time <= deadline sync m3_j1_begin goto nop_1;
	when time <= deadline sync m1_j1_finished goto nop_1;
	when time <= deadline sync m2_j2_begin goto nop_1;

	when time = deadline sync DEADLINE goto error;

loc finished: invariant time <= deadline

loc error: invariant time <= deadline

end

automaton job1


actions: m1_j1_begin, m1_j1_finished, m2_j1_begin, m2_j1_finished, m3_j1_begin, m3_j1_finished, m2_j2_begin;


loc m1_begin: invariant True
	when True sync m1_j1_begin do {c1 := 0} goto m1_running;
	when True sync m2_j2_begin do {c1 := c1} goto m1_begin;

loc m1_running: invariant c1 <= wcet_m1_job1
	when c1 = wcet_m1_job1 sync m1_j1_finished do {c1 := c1} goto m2_begin;
	when True sync m2_j2_begin do {c1 := c1} goto m1_running;

loc m1_preempted: invariant True stop{c1}
	when True sync m1_j1_begin do {c1 := c1} goto m1_running;
	when True sync m2_j2_begin do {c1 := c1} goto m1_preempted;

loc m2_begin: invariant True stop{c1}
	when True sync m2_j1_begin do {c1 := 0} goto m2_running;
	when True sync m2_j2_begin do {c1 := c1} goto m2_begin;

loc m2_running: invariant c1 <= wcet_m2_job1
	when c1 < wcet_m2_job1 sync m2_j2_begin do {c1 := c1} goto m2_preempted;
	when c1 = wcet_m2_job1 sync m2_j1_finished do {c1 := c1} goto m3_begin;

loc m2_preempted: invariant True stop{c1}
	when True sync m2_j1_begin do {c1 := c1} goto m2_running;
	when True sync m2_j2_begin do {c1 := c1} goto m2_preempted;

loc m3_begin: invariant True stop{c1}
	when True sync m3_j1_begin do {c1 := 0} goto m3_running;
	when True sync m2_j2_begin do {c1 := c1} goto m3_begin;

loc m3_running: invariant c1 <= wcet_m3_job1
	when c1 = wcet_m3_job1 sync m3_j1_finished do {c1 := c1}  goto finished;
	when True sync m2_j2_begin do {c1 := c1} goto m3_running;

loc m3_preempted: invariant True stop{c1}
	when True sync m3_j1_begin do {c1 := c1} goto m3_running;
	when True sync m2_j2_begin do {c1 := c1} goto m3_preempted;

loc finished: invariant True stop{c1}
	when True sync m2_j2_begin do {c1 := c1} goto finished;

end

automaton job2


actions: m2_j2_begin, m2_j1_begin, m2_j2_finished;


loc m2_begin: invariant True stop{c2}
	when True sync m2_j2_begin do {c2 := 0} goto m2_running;
	when True sync m2_j1_begin do {c2 := c2} goto m2_begin;

loc m2_running: invariant c2 <= wcet_m2_job2
	when c2 < wcet_m2_job2 sync m2_j1_begin do {c2 := c2} goto m2_preempted;
	when c2 = wcet_m2_job2 sync m2_j2_finished do {c2 := c2, c1 := c1} goto finished;

loc m2_preempted: invariant True stop{c2}
	when True sync m2_j2_begin do {c2 := c2} goto m2_running;
	when True sync m2_j1_begin do {c2 := c2} goto m2_preempted;

loc finished: invariant True stop{c2}
	when True sync m2_j1_begin do {c2 := c2} goto finished;

end

(************************************************************)
(* Initial state *)
(************************************************************)

init := {
	discrete =
		(*------------------------------------------------------------*)
		(* Initial location *)
		(*------------------------------------------------------------*)
				loc[checker] := nop,
				loc[job1] 	 := m1_begin,
				loc[job2] 	 := m2_begin,
	;

	continuous =
				c1 = 0 &
				c2 = 0 &
				time = 0 &
		(*------------------------------------------------------------*)
		(* Pi0 *)
		(*------------------------------------------------------------*)
				wcet_m1_job1 = 3 &
	(* 			wcet_m2_job1 = 2 & *)
				wcet_m3_job1 = 4 &
	(* 			wcet_m2_job2 = 5 & *)
	(* 			deadline = 11 & *)

				True


		(*------------------------------------------------------------*)
		(* Parameter constraints *)
		(*------------------------------------------------------------*)
				& wcet_m2_job2 >= 0
				& wcet_m2_job1 >= 0
				& deadline >= 0
	;
}

(************************************************************)
(* The end *)
(************************************************************)
end
