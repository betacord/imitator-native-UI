var time :clock;
	  deadlineBasic: parameter;
	x_1, x_2, x_3:clock;
	WCET_3, WCET_2, WCET_1:parameter;
 t_1:clock;
	per1, Off1:parameter;
 t_2:clock;
	per2, Off2:parameter;
 t_3:clock;
	per3, Off3:parameter;

(*-----------------------------------------
-- STOPPER Used for Analysis Only		--
-----------------------------------------*)
automaton stopper
actions: done1, require2, done2;

loc f_1_r: invariant time<= deadlineBasic
	when True sync done1 goto f_2_r;
	when True sync require2 goto f_1_r;
	when True sync done2 goto f_1_r;

loc f_2_r: invariant time<= deadlineBasic
	when True sync done1 goto f_3_r;
	when True sync require2 goto f_2_r;
	when True sync done2 goto f_2_r;

loc f_3_r: invariant time<= deadlineBasic
	when True sync done1 goto f_4_r;
	when True sync require2 goto f_3_r;
	when True sync done2 goto f_3_r;

loc f_4_r: invariant time<= deadlineBasic
	when True sync done1 goto f_5_r;
	when True sync require2 goto f_4_r;
	when True sync done2 goto f_4_r;

loc f_5_r: invariant time<= deadlineBasic
	when True sync done1 goto f_6_r;
	when True sync require2 goto f_5_r;
	when True sync done2 goto f_5_r;

loc f_6_r: invariant time<= deadlineBasic
	when True sync done1 goto f_7_r;
	when True sync require2 goto f_6_r;
	when True sync done2 goto f_6_r;

loc f_7_r: invariant time<= deadlineBasic
	when True sync done1 goto f_8_r;
	when True sync require2 goto f_7_r;
	when True sync done2 goto f_7_r;

loc f_8_r: invariant time<= deadlineBasic
	when True sync done1 goto f_9_r;
	when True sync require2 goto f_8_r;
	when True sync done2 goto f_8_r;

loc f_9_r: invariant time<= deadlineBasic
	when True sync done1 goto f_10_r;
	when True sync require2 goto f_9_r;
	when True sync done2 goto f_9_r;

loc f_10_r: invariant time<= deadlineBasic
	when True sync done1 goto f_10;
	when True sync require2 goto f_10_r;
	when True sync done2 goto f_10_r;

loc f_10: invariant time <= deadlineBasic
	when True sync require2 goto g_r;

loc g_r: invariant time <= deadlineBasic
	when True sync done2 goto lf_r;
	when True sync done1 goto g_r;

loc lf_r: invariant time <= deadlineBasic
	when True sync done1 goto end_flow;

loc end_flow: invariant time <= deadlineBasic

end

automaton scheduler_P_Application


actions: require1, done1, require2, done2, require3, done3;

loc active_non_1_non_2_non_3: invariant True stop{x_1,x_2,x_3}
	when True sync require1  do {x_1 := x_1, x_2 := x_2, x_3 := x_3} goto active_1_non_2_non_3;
	when True sync require2 do {x_1 := x_1, x_2 := x_2, x_3 := x_3} goto active_non_1_2_non_3;
	when True sync require3 do {x_1 := x_1, x_2 := x_2, x_3 := x_3} goto active_non_1_non_2_3;

loc active_non_1_non_2_3: invariant True stop{x_1,x_2}
	when x_3 < WCET_3 sync require1 do {x_1 := x_1, x_2 := x_2, x_3 := x_3} goto active_1_non_2_3;
	when x_3 < WCET_3 sync require2 do {x_1 := x_1, x_2 := x_2, x_3 := x_3} goto active_non_1_2_3;
	when x_3 = WCET_3 sync done3 do {x_3 := 0,x_1 := x_1, x_2 := x_2} goto active_non_1_non_2_non_3;

loc active_non_1_2_non_3: invariant True stop{x_1,x_3}
	when x_2 < WCET_2 sync require1 do {x_1 := x_1, x_2 := x_2, x_3 := x_3} goto active_1_2_non_3;
	when x_2 < WCET_2 sync require3 do {x_1 := x_1, x_2 := x_2, x_3 := x_3} goto active_non_1_2_3;
	when x_2 = WCET_2 do {x_2 := 0, x_1 := x_1, x_3 := x_3} sync done2 goto active_non_1_non_2_non_3;

loc active_non_1_2_3: invariant True stop{x_1,x_3}
	when x_2 < WCET_2 sync require1 do {x_1 := x_1, x_2 := x_2, x_3 := x_3} goto active_1_2_3;
	when x_2 = WCET_2 sync done2 do {x_2 := 0, x_1 := x_1, x_3 := x_3} goto active_non_1_non_2_3;

loc active_1_non_2_non_3: invariant True stop{x_2,x_3}
	when x_1 < WCET_1 sync require2 do {x_1 := x_1, x_2 := x_2, x_3 := x_3} goto active_1_2_non_3;
	when x_1 < WCET_1 sync require3 do {x_1 := x_1, x_2 := x_2, x_3 := x_3} goto active_1_non_2_3;
	when x_1 = WCET_1 sync done1 do {x_1 := 0, x_2 := x_2, x_3 := x_3} goto active_non_1_non_2_non_3;

loc active_1_non_2_3: invariant True stop{x_2,x_3}
	when x_1 < WCET_1 sync require2 do {x_1 := x_1, x_2 := x_2, x_3 := x_3} goto active_1_2_3;
	when x_1 = WCET_1 sync done1  do {x_1 := 0, x_2 := x_2, x_3 := x_3} goto active_non_1_non_2_3;

loc active_1_2_non_3: invariant True stop{x_2,x_3}
	when x_1 < WCET_1 sync require3 do {x_1 := x_1, x_2 := x_2, x_3 := x_3} goto active_1_2_3;
	when x_1 = WCET_1 sync done1 do {x_1 := 0, x_2 := x_2, x_3 := x_3}  goto active_non_1_2_non_3;

loc active_1_2_3: invariant True stop{x_2,x_3}
	when x_1 = WCET_1 sync done1 do {x_1 := 0, x_2 := x_2, x_3 := x_3} goto active_non_1_2_3;

end (*automaton_P_gyro*)

automaton T_1


actions: done1, require1;

loc init_s: invariant t_1 <= Off1
	when t_1 = Off1 sync require1 do {t_1 := 0} goto waiting;

loc idle: invariant t_1 <= per1
	when t_1 = per1 sync require1 do {t_1 := 0} goto waiting;

loc waiting: invariant t_1 <= per1
	when True sync done1 do {} goto idle;

end

automaton T_2

actions: done2, require2;

loc init_s: invariant t_2 <= Off2
	when t_2 = Off2 sync require2 do {t_2 := 0} goto waiting;

loc idle: invariant t_2 <= per2
	when t_2 = per2 sync require2 do {t_2 := 0} goto waiting;

loc waiting: invariant t_2 <= per2
	when True sync done2 do {} goto idle;

end

automaton T_3


actions: done3, require3;

loc init_s: invariant t_3 <= Off3
	when t_3 = Off3 sync require3 do {t_3 := 0} goto waiting;

loc idle: invariant t_3 <= per3
	when t_3 = per3 sync require3 do {t_3 := 0} goto waiting;

loc waiting: invariant t_3 <= per3
	when True sync done3 do {} goto idle;

end

(************************************************************)
(* Initial state *)
(************************************************************)

init := {
	discrete =
		(*------------------------------------------------------------*)
		(* Initial location *)
		(*------------------------------------------------------------*)
		loc[stopper] := f_1_r,
		loc[scheduler_P_Application] := active_non_1_non_2_non_3,
		loc[T_1] := init_s,
		loc[T_2] := init_s,
		loc[T_3] := init_s,
	;

	continuous =
		x_1 = 0 &
		x_2 = 0 &
		x_3 = 0 &
		t_1 = 0 &
		t_2 = 0 &
		t_3 = 0 &
		time = 0


		(*------------------------------------------------------------*)
		(* Parameter constraints *)
		(*------------------------------------------------------------*)
		& deadlineBasic >= 0
		& WCET_3 >= 0
		& WCET_2 >= 0
		& WCET_1 >= 0
		& per1 >= 0
		& Off1 >= 0
		& per2 >= 0
		& Off2 >= 0
		& per3 >= 0
		& Off3 >= 0


		(*
		--&
		-- deadlineBasic = 134 &
		--WCET_1 = 4 &
		--WCET_2 = 20 &
		--WCET_3 = 120 &
		--per1 = 10 &
		--per2 = 100 &
		--per3 = 1000 &
		--Off1 = 0 &
		--Off2 = 94 &
		--Off3 = 0
		*)
	;
}

(************************************************************)
(* The end *)
(************************************************************)
end
