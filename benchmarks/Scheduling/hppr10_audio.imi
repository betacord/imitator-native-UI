var

	ptpOff, ptpPeriod, audOff, audPeriod, D1, driftDelta, D2, C1, C2: parameter;
	cPtp,cAudio,rAudioChecker,cAudioChecker :clock;

automaton act_Ptp

actions: Release_PTP;

loc WFO: invariant cPtp <= ptpOff
	when cPtp = ptpOff sync Release_PTP do {cPtp := 0} goto WFP;

loc WFP: invariant cPtp <= ptpPeriod
	when cPtp = ptpPeriod sync Release_PTP do {cPtp := 0} goto WFP;

end

automaton act_Audio


actions: Release_Audio;

loc WFO: invariant cAudio <= audOff
	when cAudio = audOff sync Release_Audio do {cAudio := 0} goto WFP;

loc WFP: invariant cAudio <= audPeriod
	when cAudio = audPeriod  sync Release_Audio do {cAudio := 0} goto WFP;

end


automaton Audio_Checker

actions: Release_PTP, Release_Audio, Ending_Audio;

loc idle: invariant True stop{rAudioChecker}
	when True sync Release_Audio do {cAudioChecker := 0, rAudioChecker := C2} goto check;
	when True sync Release_Audio do {cAudioChecker := 0, rAudioChecker := C2} goto busy;
	when True sync Release_PTP do {cAudioChecker := 0, rAudioChecker := C1} goto busy;

loc busy: invariant True stop{rAudioChecker}
	when cAudioChecker < rAudioChecker sync Release_Audio do {rAudioChecker := rAudioChecker + C2} goto busy;
	when cAudioChecker < rAudioChecker sync Release_PTP do {rAudioChecker := rAudioChecker + C1} goto busy;
	when cAudioChecker = rAudioChecker sync Ending_Audio do{rAudioChecker := rAudioChecker} goto idle;
	when cAudioChecker < rAudioChecker sync Release_Audio do {rAudioChecker := rAudioChecker + C2 - cAudioChecker} goto check;

loc check: invariant True stop{rAudioChecker}
	when cAudioChecker = 0 sync Release_PTP do {rAudioChecker :=  rAudioChecker + C1} goto check;
	when cAudioChecker > 0 & cAudioChecker < rAudioChecker & cAudioChecker < D2 - driftDelta sync Release_PTP goto check;
	when True sync Release_Audio goto check;
	when cAudioChecker = rAudioChecker & cAudioChecker <= D2 - driftDelta sync Ending_Audio goto idle;
	when cAudioChecker < rAudioChecker & cAudioChecker = D2 - driftDelta goto error;

loc error: invariant True stop{rAudioChecker}

end


(************************************************************)
(* Initial state *)
(************************************************************)

init := {
	discrete =
	(*------------------------------------------------------------*)
	(* Initial location *)
	(*------------------------------------------------------------*)
		loc[act_Ptp]  := WFO,
		loc[act_Audio]  := WFO,
		loc[Audio_Checker] := idle,
	;

	continuous =
		rAudioChecker = 0 &
		cAudioChecker = 0 &
		cPtp = 0 &
		cAudio = 0 &
	(*------------------------------------------------------------*)
	(* Pi0 *)
	(*------------------------------------------------------------*)
	(* 	ptpOff = 0 & *)
	 ptpPeriod = 40 &
	(* 	audOff = 0 & *)
		audPeriod = 10 &
	(* 	D1 = 10 & *)
	(* 	driftDelta = 0 & *)
	(* 	D2 = 10 & *)
	(* 	C1 = 10 & *)
	(* 	C2 = 5 & *)

	(*--n1 = 0 &
	--n2 = 0 &
	--task = 0 &
	--dm = 0*)

	True
		(*------------------------------------------------------------*)
		(* Parameter constraints *)
		(*------------------------------------------------------------*)


		& ptpOff >= 0
		& ptpPeriod >= 0
		& audOff >= 0
		& audPeriod >= 0
		& D1 >= 0
		& driftDelta >= 0
		& D2 >= 0
		& C1 >= 0
		& C2 >= 0
	;
}


(************************************************************)
(* The end *)
(************************************************************)
end
