var
	O_1, O_2, C_1, C_2, D_1, D_2, T_1, T_2 : parameter;
	clock_1,clock_2,SC_1r,SC_1x,SC_2r,SC_2x :clock;

automaton act_t1

actions: Release1;

loc WFO: invariant clock_1 <= O_1
	when clock_1 = O_1 sync Release1 do {clock_1 := 0} goto WFP;

loc WFP: invariant clock_1 <= T_1
	when clock_1 = T_1  sync Release1 do {clock_1 := 0} goto WFP;

end

automaton act_t2

actions: Release2;

loc WFO: invariant clock_2 <= O_2
	when clock_2 = O_2 sync Release2 do {clock_2 := 0} goto WFP;

loc WFP: invariant clock_2 <= T_2
	when clock_2 = T_2  sync Release2 do {clock_2 := 0} goto WFP;

end

automaton scheduler_1

actions: Release1, Busy_idle1, Check_idle1, Check_error1;

loc idle: invariant SC_1r <= D_1 stop{SC_1r}
	when True sync Release1 do {SC_1x := 0, SC_1r :=  C_1} goto busy;
	when True sync Release1 do {SC_1x := 0, SC_1r :=  C_1} goto check;

loc busy: invariant SC_1r <= D_1 stop{SC_1r}
	when True sync Release1 do {SC_1r := SC_1r, SC_1x :=  SC_1x} goto busy;
	when SC_1x = SC_1r sync Busy_idle1 do {SC_1r :=  SC_1r, SC_1x := SC_1x} goto idle;
	when True sync Release1 do {SC_1x := 0, SC_1r := SC_1r + C_1 - SC_1x} goto check;

loc check: invariant SC_1r <= D_1 stop{SC_1r}
	when True sync Release1 do {SC_1r :=  SC_1r + C_1, SC_1x := SC_1x} goto check;
	when SC_1x < SC_1r & SC_1x >= D_1 sync Check_error1 do {SC_1r :=  SC_1r, SC_1x := SC_1x} goto error;
	when SC_1x = SC_1r & SC_1x < D_1 do {SC_1r :=  SC_1r, SC_1x := SC_1x} sync Check_idle1 goto idle;

loc error: invariant SC_1r <= D_1 stop{SC_1r}

end


automaton scheduler_2

actions: Release1, Release2, Busy_idle2, Check_idle2, Check_error2;

loc idle: invariant SC_2r <= D_2 stop{SC_2r}
	when True sync Release1 do {SC_2x := 0, SC_2r :=  C_1} goto busy;
	when True sync Release2 do {SC_2x := 0, SC_2r :=  C_2} goto busy;
	when True sync Release2 do {SC_2x := 0, SC_2r :=  C_2} goto check;

loc busy: invariant SC_2r <= D_2 stop{SC_2r}
	when SC_2x = SC_2r sync Busy_idle2 do {} goto idle;
	when True sync Release2 do {SC_2r  := SC_2r + C_2} goto busy;
	when True sync Release1 do {SC_2r  := SC_2r + C_1} goto busy;
	when True sync Release2 do {SC_2r  := SC_2r + C_2 - SC_2x, SC_2x := 0} goto check;

loc check: invariant SC_2r <= D_2 stop{SC_2r}
	when True sync Release2 do {} goto check;
	when SC_2x < SC_2r & SC_2x < D_2 sync Release1 do {SC_2r := SC_2r + C_1} goto check;
	when SC_2x = SC_2r & SC_2x <= D_2 do {} sync Check_idle2 goto idle;
	when SC_2x < SC_2r & SC_2x >= D_2 do {} sync Check_error2 goto error_s;

loc error_s: invariant SC_2r <= D_2 stop{SC_2r}

end


(************************************************************)
(* Initial state *)
(************************************************************)

init := {
	discrete =
		(*------------------------------------------------------------*)
		(* Initial location *)
		(*------------------------------------------------------------*)
			loc[act_t1]  		 := WFO,
			loc[act_t2]  		 := WFO,
			loc[scheduler_1] := idle,
			loc[scheduler_2] := idle,
	;
	continuous =
		clock_1 = 0 &
		clock_2 = 0 &
		SC_2x = 0 &
		SC_2r = 0 &
		SC_1x = 0 &
		SC_1r = 0 &
		(*------------------------------------------------------------*)
		(* Pi0 *)
		(*------------------------------------------------------------*)
		D_1 = 7 &
		T_1 = 10 &
		D_2 = 6 &
		T_2 = 10 &
		O_1 = 0
		(*--			O_2 = 3 &
		--			C_1 = 3 &
		--			C_2 = 5 *)

		& O_2 >= 0
		& C_1 >= 0
		& C_2 >= 0
	;
}

(************************************************************)
(* The end *)
(************************************************************)
end
