(************************************************************
 *                                IMITATOR MODEL
 *
 * Title            : Small example to demonstrate EFexemplify
 * Description      : Property: "if s_1 and s_2 cross each other NB times, then after exactly p time units we have s_1 = 3 s_2"
 * Correctness      : TODO
 * Scalable         : no
 * Generated        : no
 * Categories       : TBD
 * Source           : Own work
 * bibkey           : 
 * Author           : Étienne André
 * Modeling         : Étienne André
 * Input by         : Étienne André
 * License          : Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
 *
 * Created          : 2021/06/04
 * Last modified    : 2023/05/12
 * Model version    : 0.1
 *
 * IMITATOR version : 3.1
 ************************************************************)

var

(* Clocks *)
	(*global_time,*)
 	x,
 	s_1, s_2,
		: clock;

(* Discrete *)
	nb
		: int;

(* Parameters *)
	p
		: parameter;

(* Constants *)
	NB = 20 : int;


(************************************************************)
  automaton spec
(************************************************************)
synclabs: satisfied, greater, smaller;

loc l1: invariant True
	when s_1 > s_2 do {} sync greater goto l2;

loc l2: invariant True
	when s_1 < s_2 & nb < NB do {nb := nb+1} sync smaller goto l1;
	when s_1 < s_2 & nb = NB do {x := 0} sync smaller goto wait10;

loc wait10: invariant x <= p
	when x = p & s_1 = 3 s_2 sync satisfied goto lfinal;

accepting loc lfinal: invariant True

end (* spec *)




(************************************************************)
  automaton signal_1
(************************************************************)
synclabs: decrease_slow_1, stabilize_1, increase_slow_1;

loc increasing_slow: invariant True flow {s_1' = 1}
	when True sync stabilize_1 goto stabilized;

loc stabilized: invariant True flow {s_1' = 0}
	when True sync increase_slow_1 goto increasing_slow;
	when s_1 > 0 sync decrease_slow_1 goto decreasing_slow;

loc decreasing_slow: invariant s_1 >= 0 flow {s_1' = -1}
	when True sync stabilize_1 goto stabilized;

end (* signal_1 *)


(************************************************************)
  automaton signal_2
(************************************************************)
synclabs: decrease_slow_2, stabilize_2, increase_slow_2;

loc increasing_slow: invariant True flow {s_2' = 1}
	when True sync stabilize_2 goto stabilized;

loc stabilized: invariant True flow {s_2' = 0}
	when True sync increase_slow_2 goto increasing_slow;
	when s_2 > 0 sync decrease_slow_2 goto decreasing_slow;

loc decreasing_slow: invariant s_2 >= 0 flow {s_2' = -1}
	when True sync stabilize_2 goto stabilized;

end (* signal_2 *)




(************************************************************)
(* Initial state *)
(************************************************************)

init := {
	
    discrete =
		(*------------------------------------------------------------*)
		(* Initial location *)
		(*------------------------------------------------------------*)
		loc[spec] := l1,
		loc[signal_1] := stabilized,
		loc[signal_2] := stabilized,
		(*------------------------------------------------------------*)
		(* Initial discrete *)
		(*------------------------------------------------------------*)
		nb := 0,

    ;

    continuous =        
		(*------------------------------------------------------------*)
		(* Initial clock constraints *)
		(*------------------------------------------------------------*)
		(*global_time = 0*)
		& x = 0
		(*------------------------------------------------------------*)
		(* Parameter constraints *)
		(*------------------------------------------------------------*)
		& p >= 0
	;
}


(************************************************************)
(* The end *)
(************************************************************)
end
