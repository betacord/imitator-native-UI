(************************************************************
 *                      IMITATOR MODEL
 *
 * Jobshop case study
 *
 * Description     : Jobshop case study
 * Correctness     : All tasks performed on time
 * Source          : Maler et al. ("Job-Shop Scheduling Using Timed Automata", by Yasmina Abdeddaı̈m and Oded Maler, CAV 2001 (??))
 * Author          : Romain Soulat
 * Modeling        : Romain Soulat
 * Input by        : Romain Soulat, Étienne André
 * License         : Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
 *
 * Created         : < 2011/10/25
 * Last modified   : 2024/02/22
 *
 * IMITATOR version: 3.4
 ************************************************************)


(*--Job2_4: solution = 27
--
--J1: m3(1),m1(3),m2(6),m4(7)
--J2: m2(8),m3(5),m1(10),m4(4)*)

var 	x1, x2, x3(*, s*)
		: clock;

	m1,m2,m3,m4
		: bool;

(************************************************************)
  automaton job1
(************************************************************)
actions: b1;

loc I1: invariant True
	when  not(m3)  sync b1 do {x1 :=  0, m3 := True} goto J1;

loc J1: invariant x1<= 6
	when  x1 = 6 sync b1 do {m3 := False} goto K1;

loc K1: invariant True
	when  not(m1) sync b1 do {x1 := 0,m1 := True} goto L1;

loc L1: invariant x1 <= 1
	when  x1=1 sync b1 do {m1 := False} goto M1;

loc M1: invariant True
	when  not(m2) sync b1 do {x1 := 0,m2 := True} goto N1;

loc N1: invariant x1 <= 3
	when  x1=3 sync b1 do {m3 := False} goto P1;

loc P1: invariant True
	when  not(m4) sync b1 do {x1 := 0,m4 := True} goto Q1;

loc Q1: invariant x1 <= 7
	when  x1=7 sync b1 do {m3 := False} goto End1;

loc End1: invariant True

end (*job1*)

(************************************************************)
  automaton job2
(************************************************************)
actions: b2;

loc I2: invariant True
	when  not(m2) sync b2 do {x2 := 0,m2 := True} goto J2;

loc J2: invariant x2<= 5
	when  x2 = 5 sync b2 do {m2 := False} goto K2;

loc K2: invariant True
	when  not(m3) sync b2 do {x2 := 0,m3 := True} goto L2;

loc L2: invariant x2 <= 10
	when  x2=10 sync b2 do {m3 := False} goto M2;

loc M2: invariant True
	when  not(m1) sync b2 do {x2 := 0,m1 := True} goto N2;

loc N2: invariant x2 <= 8
	when  x2=8 sync b2 do {m1 := False} goto P2;

loc P2: invariant True
	when  not(m4) sync b2 do {x2 := 0,m4 := True} goto Q2;

loc Q2: invariant x2 <= 4
	when  x2=4 sync b2 do {m4 := False} goto End2;

loc End2: invariant True

end (*job2*)

(************************************************************)
  automaton job3
(************************************************************)
actions: b3;

loc I3: invariant True
	when  not(m3) sync b3 do {x3 := 0,m3 := True} goto J3;

loc J3: invariant x3<= 9
	when  x3 = 9 sync b3 do {m3 := False} goto K3;

loc K3: invariant True
	when  not(m4) sync b3 do {x3 := 0,m4 := True} goto L3;

loc L3: invariant x3 <= 1
	when  x3=1 sync b3 do {m4 := False} goto M3;

loc M3: invariant True
	when  not(m1) sync b3 do {x3 := 0,m1 := True} goto N3;

loc N3: invariant x3 <= 5
	when  x3=5 sync b3 do {m1 := False} goto P3;

loc P3: invariant True
	when  not(m2) sync b3 do {x3 := 0,m2 := True} goto Q3;

loc Q3: invariant x3 <= 4
	when  x3=4 sync b3 do {m2 := False} goto End3;

loc End3: invariant True

end (*job3*)



(************************************************************)
(* Initial state *)
(************************************************************)

init := {
  discrete =
  	(*------------------------------------------------------------*)
  	(* Initial location *)
  	(*------------------------------------------------------------*)
  	  loc[job1] := I1,
  	loc[job2] := I2,
  	loc[job3] := I3,

  	m1 := False,
    m2 := False,
    m3 := False,
    m4 := False,
  ;

  continuous =
  	(*------------------------------------------------------------*)
  	(* Initial clock constraints *)
  	(*------------------------------------------------------------*)
  	& x1=0
  	& x2=0
  	& x3=0
(*   	& s=0 *)
  	(*------------------------------------------------------------*)
  	(* Parameter constraints *)
  	(*------------------------------------------------------------*)
  	(*
  	& 1=1
  	& 3=3
  	& 6=6
  	& 7=7
  	& 8=8
  	& 5=5
  	& 10=10
  	& 4=4
  	& 5=5
  	& 4=4
  	& 9=9
  	& 1=1
  	*)
  ;
}


(************************************************************)
(* The end *)
(************************************************************)
end
