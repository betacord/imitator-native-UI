(************************************************************
 *                      IMITATOR MODEL
 *
 * Race on a digital circuit (SR Latch)
 *
 * Description     : Race on a digital circuit (SR Latch). Version with point traversal delays (no interval). Note: this file was rewritten (2014/08/26) because the original seems to have been lost
 * Correctness     : TODO
 * Source          : TODO
 * Author          : Étienne André
 * Modeling        : Étienne André
 * Input by        : Étienne André
 * License         : Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
 *
 * Created         : 2010/03/19
 * Last modified   : 2024/02/22
 *
 * IMITATOR version: 3.4
 ************************************************************)


var 	ckNor1, ckNor2, s
		: clock;

	dNor1 (*= 2*),
	dNor2 (*= 2*),
(*  	t_R_down, t_S_down, *)
	t_down (*= 1*)
			: parameter;

(************************************************************)
(* DESCRIPTION*)
(************************************************************)

(* We consider that the following connections :
 ** norGate1 :
 	* input1 : R
 	* input2 : overQ
 	* output : Q
 ** norGate2 :
 	* input1 : Q
 	* input2 : S
 	* output : overQ
*)


(************************************************************)
  automaton norGate1
(************************************************************)

actions: R_Up, R_Down, overQ_Up, overQ_Down,
	Q_Up, Q_Down;

(* UNSTABLE *)
loc Nor1_000: invariant ckNor1 <= dNor1
	when True sync R_Up do {} goto Nor1_100;
	when True sync overQ_Up do {} goto Nor1_010;
	when ckNor1 = dNor1 sync Q_Up do {} goto Nor1_001;

(* STABLE *)
loc Nor1_001: invariant True
	when True sync R_Up do {ckNor1 := 0} goto Nor1_101;
	when True sync overQ_Up do {ckNor1 := 0} goto Nor1_011;

(* STABLE *)
loc Nor1_010: invariant True
	when True sync R_Up do {} goto Nor1_110;
	when True sync overQ_Down do {ckNor1 := 0} goto Nor1_000;

(* UNSTABLE *)
loc Nor1_011: invariant ckNor1 <= dNor1
	when True sync R_Up do {ckNor1 := 0} goto Nor1_111;
	when True sync overQ_Down do {} goto Nor1_001;
	when ckNor1 = dNor1 sync Q_Down do {} goto Nor1_010;

(* STABLE *)
loc Nor1_100: invariant True
	when True sync R_Down do {ckNor1 := 0} goto Nor1_000;
	when True sync overQ_Up do {} goto Nor1_110;

(* UNSTABLE *)
loc Nor1_101: invariant ckNor1 <= dNor1
	when True sync R_Down do {} goto Nor1_001;
	when True sync overQ_Up do {ckNor1 := 0} goto Nor1_111;
	when ckNor1 = dNor1 sync Q_Down do {} goto Nor1_100;

(* STABLE *)
loc Nor1_110: invariant True
	when True sync R_Down do {} goto Nor1_010;
	when True sync overQ_Down do {} goto Nor1_100;

(* UNSTABLE *)
loc Nor1_111: invariant ckNor1 <= dNor1
	when True sync R_Down do {ckNor1 := 0} goto Nor1_011;
	when True sync overQ_Down do {ckNor1 := 0} goto Nor1_101;
	when ckNor1 = dNor1 sync Q_Down do {} goto Nor1_110;

end (*norGate1*)


(************************************************************)

  automaton norGate2
(************************************************************)

actions: Q_Up, Q_Down, S_Up, S_Down,
	overQ_Up, overQ_Down;

(* UNSTABLE *)
loc Nor2_000: invariant ckNor2 <= dNor2
	when True sync Q_Up do {} goto Nor2_100;
	when True sync S_Up do {} goto Nor2_010;
	when ckNor2 = dNor2 sync overQ_Up do {} goto Nor2_001;

(* STABLE *)
loc Nor2_001: invariant True
	when True sync Q_Up do {ckNor2 := 0} goto Nor2_101;
	when True sync S_Up do {ckNor2 := 0} goto Nor2_011;

(* STABLE *)
loc Nor2_010: invariant True
	when True sync Q_Up do {} goto Nor2_110;
	when True sync S_Down do {ckNor2 := 0} goto Nor2_000;

(* UNSTABLE *)
loc Nor2_011: invariant ckNor2 <= dNor2
	when True sync Q_Up do {ckNor2 := 0} goto Nor2_111;
	when True sync S_Down do {} goto Nor2_001;
	when ckNor2 = dNor2 sync overQ_Down do {} goto Nor2_010;

(* STABLE *)
loc Nor2_100: invariant True
	when True sync Q_Down do {ckNor2 := 0} goto Nor2_000;
	when True sync S_Up do {} goto Nor2_110;

(* UNSTABLE *)
loc Nor2_101: invariant ckNor2 <= dNor2
	when True sync Q_Down do {} goto Nor2_001;
	when True sync S_Up do {ckNor2 := 0} goto Nor2_111;
	when ckNor2 = dNor2 sync overQ_Down do {} goto Nor2_100;

(* STABLE *)
loc Nor2_110: invariant True
	when True sync Q_Down do {} goto Nor2_010;
	when True sync S_Down do {} goto Nor2_100;

(* UNSTABLE *)
loc Nor2_111: invariant ckNor2 <= dNor2
	when True sync Q_Down do {ckNor2 := 0} goto Nor2_011;
	when True sync S_Down do {ckNor2 := 0} goto Nor2_101;
	when ckNor2 = dNor2 sync overQ_Down do {} goto Nor2_110;

end (*norGate2*)


(************************************************************)
  automaton env
(************************************************************)

actions: R_Down, R_Up, S_Down, S_Up;

(*-- loc env_R: invariant s <= t_down
-- 	when s = t_down sync R_Down do {} goto env_final;*)

(*-- loc env_S: invariant s <= t_down
-- 	when s = t_down sync S_Down do {} goto env_final;*)


(* -- ENVIRONMENT : first S then R at constant time *)
loc env_11: invariant True
	when True sync S_Down do {s := 0} goto env_10;

loc env_10: invariant s <= t_down
	when s = t_down sync R_Down do {} goto env_final;


(* -- ENVIRONMENT : R and S go down anytime *)
(*-- loc env_11: invariant True
-- 	when True sync R_Down do {} goto env_01;
-- 	when True sync S_Down do {} goto env_10;
--
-- loc env_01: invariant True
-- 	when True sync S_Down do {} goto env_final;
--
-- loc env_10: invariant True
-- 	when True sync R_Down do {} goto env_final;*)

(* -- ENVIRONMENT : S and R anytime (at a parametric time) *)
(*-- loc env_11: invariant s <= t_R_down & s <= t_S_down
-- 	when s = t_R_down sync R_Down do {} goto env_01;
-- 	when s = t_S_down sync S_Down do {} goto env_10;
--
-- loc env_01: invariant s <= t_S_down
-- 	when s = t_S_down sync S_Down do {} goto env_final;
--
-- loc env_10: invariant s <= t_R_down
-- 	when s = t_R_down sync R_Down do {} goto env_final;*)

loc env_final: invariant True

end (*env*)

(************************************************************)
(* Initial state *)
(************************************************************)

init := {
  discrete =
  	(*------------------------------------------------------------*)
  	(* Initial location *)
  	(*------------------------------------------------------------*)

    (*	-- R down
    -- 	loc[norGate1] := Nor1_110,
    -- 	loc[norGate2] := Nor2_001,
    -- 	loc[env]		:= env_R,

    	-- S down
    -- 	loc[norGate1] := Nor1_001,
    -- 	loc[norGate2] := Nor2_110,
    -- 	loc[env]		:= env_S,*)

    (* 	-- S and R down *)
  	loc[norGate1] := Nor1_100,
  	loc[norGate2] := Nor2_010,
  	loc[env]		  := env_11,
  ;

  continuous =
  	(*------------------------------------------------------------*)
  	(* Initial clock constraints *)
  	(*------------------------------------------------------------*)
  	& ckNor1	= 0
  	& ckNor2	= 0
  	& s			= 0

  	(*------------------------------------------------------------*)
  	(* Parameter constraints *)
  	(*------------------------------------------------------------*)
  	& dNor1 >= 0
  	& dNor2 >= 0

  	(*------------------------------------------------------------*)
  	(* Pi0 *)
  	(*------------------------------------------------------------*)
    (*	& dNor1	= 2
     	& dNor2	= 2
    *)
  	& t_down	= 1

  ;
}

(************************************************************)
(* The end *)
(************************************************************)
end
