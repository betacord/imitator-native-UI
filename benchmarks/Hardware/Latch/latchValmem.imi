(************************************************************
 *                      IMITATOR MODEL
 *
 * Sample latch circuit (ST-Microelectronics)
 *
 * Description     : Sample latch circuit
 * Correctness     : ?
 * Source          : Rémy Chevallier; Times by Patricia Renault (LIP6)
 * Author          : Étienne André et al. (ANR VALMEM project)
 * Modeling        : Étienne André
 * Input by        : Étienne André
 * License         : Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
 *
 * Created         : 2007/12
 * Last modified   : 2024/02/22
 *
 * IMITATOR version: 3.4
 ************************************************************)

var 	s, ckClock, ckD, ckNot1, ckNot2, ckXor, ckAnd, ckLatch
		: clock;

(* 	tNot1Down1,
 	tNot2Up1,
 	tXorUp1, tXorDown1,
 	tAndUp1, tAndDown1,
 	tLatchUp1,*)
	q
		: bool;

	dClockHigh, dClockLow,
	dSetup, dHold,
	dNot1Down, dNot1Up,
	dNot2Down, dNot2Up,
	dXorDown1Up, dXorUp2Up,
	dAndUp2, dAndDown1,
	dLatchUp
			: parameter;



(************************************************************)
automaton clock1
(************************************************************)
actions: clockUp1;

loc ClockLow1: invariant ckClock <= dClockLow
	when ckClock >= dClockLow sync clockUp1 do {ckClock := 0} goto ClockHigh1;

loc ClockHigh1: invariant ckClock <= dClockHigh
(*  	when True do {} goto ClockHigh1; *)
end (*clock1*)


(************************************************************)
automaton d1
(************************************************************)
actions: clockUp1, dUp1, dDown1;

loc DLow1: invariant ckD<=dClockLow-dSetup
		when ckD=dClockLow-dSetup sync dUp1 do {ckD := 0} goto DHigh1;

loc DHigh1: invariant ckD<=dSetup
	when ckD=dSetup sync clockUp1 do {ckD := 0} goto DHigh2;

loc DHigh2: invariant ckD<=dHold
	when ckD=dHold sync dDown1 do {} goto DLow2;

loc DLow2: invariant ckD >= 0
(*  	when True do {} goto DLow2; *)

end (*d1*)


(************************************************************)
automaton not1
(************************************************************)
actions: clockUp1,
	not1Down1;

loc Not1High1: invariant ckNot1 >= 0
	when True sync clockUp1 do {ckNot1 := 0} goto Not1High1bis;

loc Not1High1bis: invariant ckNot1 <= dNot1Down
	when ckNot1 >= dNot1Down sync not1Down1 do {(*tNot1Down1 := s*)} goto Not1Low1;

loc Not1Low1: invariant ckNot1 >= 0
	(*when True do {} goto Not1Low1;*)
end (*not1*)


(************************************************************)
automaton not2
(************************************************************)
actions: not1Down1,
	not2Up1;

loc Not2Low1: invariant ckNot2 >= 0
	when True sync not1Down1 do {ckNot2 := 0} goto Not2Low1bis;

loc Not2Low1bis: invariant ckNot2 <= dNot2Up
	when ckNot2 >= dNot2Up sync not2Up1 do {(*tNot2Up1 := s*)} goto Not2High1;

loc Not2High1: invariant ckNot2 >= 0
	(*when True do {} goto Not2High1;*)
end (*not2*)


(************************************************************)
automaton xor1
(************************************************************)
actions: clockUp1, not2Up1,
	xorUp1, xorDown1;

loc XorLow1: invariant ckXor >= 0
	when True sync clockUp1 do {ckXor := 0} goto XorLow1bis;

loc XorLow1bis: invariant ckXor <= dXorUp2Up
	when ckXor >= dXorUp2Up sync xorUp1 do {(*tXorUp1 := s*)} goto XorHigh1;

loc XorHigh1: invariant ckXor >= 0
	when True sync not2Up1 do {ckXor := 0} goto XorHigh1bis;

loc XorHigh1bis: invariant ckXor <= dXorDown1Up
	when ckXor >= dXorDown1Up sync xorDown1 do {(*tXorDown1 := s*)} goto XorLow2;

loc XorLow2: invariant ckXor >= 0
	(*when True do {} goto XorLow2;*)
end (*xor1*)


(************************************************************)
automaton and1
(************************************************************)
actions: clockUp1, xorDown1,
	andUp1, andDown1;

loc AndLow1: invariant ckAnd >= 0
	when True sync clockUp1 do {ckAnd := 0} goto AndLow1bis;

loc AndLow1bis: invariant ckAnd <= dAndUp2
	when ckAnd >= dAndUp2 sync andUp1 do {(*tAndUp1 := s*)} goto AndHigh1;

loc AndHigh1: invariant ckAnd >= 0
	when True sync xorDown1 do {ckAnd := 0} goto AndHigh1bis;

loc AndHigh1bis: invariant ckAnd <= dAndDown1
	when ckAnd >= dAndDown1 sync andDown1 do {(*tAndDown1 := s*)} goto AndLow2;

loc AndLow2: invariant ckAnd >= 0
	(*when True do {} goto AndLow2;*)
end (*and1*)


(************************************************************)
automaton latch1
(************************************************************)
actions: dUp1, dDown1, andUp1, andDown1,
	latchUp1;

loc LatchD0E0: invariant ckLatch >= 0
	when True sync dUp1 do {} goto LatchD1E0;
	when True sync andUp1 do {ckLatch := 0} goto LatchD0E1;

loc LatchD0E1: invariant ckLatch >= 0 (*simplification : Q can not go down in our case*)
	when True sync dUp1 do {ckLatch := 0} goto LatchD1E1;
	when True sync andDown1 do {} goto LatchD0E0;

loc LatchD1E0: invariant ckLatch >= 0
	when True sync andUp1 do {ckLatch := 0} goto LatchD1E1;
	when True sync dDown1 do {} goto LatchD0E0;

loc LatchD1E1: invariant ckLatch <= dLatchUp
	when ckLatch >= dLatchUp sync latchUp1 do {(*tLatchUp1 := s, *) q := (*1*)True}
			goto LatchD1E1B;
	when True sync dDown1 do {} goto LatchD0E1;
	when True sync andDown1 do {} goto LatchD1E0;

loc LatchD1E1B: invariant ckLatch >= 0
	when True sync andDown1 do {} goto LatchD1E0;
	when True sync dDown1 do {} goto LatchD0E1;
end (*latch1*)




(************************************************************)
(* Initial state *)
(************************************************************)

init := {
  discrete =
  	(*------------------------------------------------------------*)
  	(* Initial location *)
  	(*------------------------------------------------------------*)
  	loc[clock1]  := ClockLow1,
  	loc[d1]      := DLow1,
  	loc[not1]    := Not1High1,
  	loc[not2]    := Not2Low1,
  	loc[xor1]    := XorLow1,
  	loc[and1]    := AndLow1,
  	loc[latch1]  := LatchD0E0,

  	(*------------------------------------------------------------*)
  	(* Initial discrete assignments *)
  	(*------------------------------------------------------------*)
  	q := (*2*)False,
  ;

  continuous =
  	(*------------------------------------------------------------*)
  	(* Initial clock constraints *)
  	(*------------------------------------------------------------*)
  	& s       = 0
  	& ckClock = 0
  	& ckD     = 0
  	& ckNot1  = 0
  	& ckNot2  = 0
  	& ckXor   = 0
  	& ckAnd   = 0
  	& ckLatch = 0


  	(*------------------------------------------------------------*)
  	(* Parameter constraints *)
  	(*------------------------------------------------------------*)

  	& dClockLow		>= 0
  	& dClockHigh	>= 0
  	& dHold			>= 0
  	& dNot2Up		>= 0
  	& dXorUp2Up		>= 0
  	& dLatchUp>=0
  	& dAndUp2 >=0
  	& dNot2Down>=0
  	& dNot1Up>=0
  	& dNot1Down>=0
  	& dXorDown1Up>=0
  	& dAndDown1>=0
  	& dSetup>=0

  (*	& dLatchUp>0
  	& dAndUp2 >0
  	& dNot2Down>0
  	& dNot1Up>0
  	& dNot1Down>0
  	& dXorDown1Up>0
  	& dAndDown1>0
  	& dSetup>0

   	& dNot1Down = dNot1Down
   	& dNot1Up = dNot1Up
   	& dNot2Down = dNot2Down
   	& dNot2Up = dNot2Up
   	& dXorUp2Up = dXorUp2Up
   	& dXorDown1Up = dXorDown1Up
   	& dAndUp2 = dAndUp2
   	& dAndDown1 = dAndDown1
   	& dLatchUp = dLatchUp*)

  	(*------------------------------------------------------------*)
  	(* Resulting times and durations (in ps) *)
  	(*------------------------------------------------------------*)
  (*
   	& tNot1Down1 = 0

   	& tNot2Up1 = 0

   	& tXorUp1 = 0
   	& tXorDown1 = 0

   	& tAndUp1 = 0
   	& tAndDown1 = 0

   	& tLatchUp1 = 0*)


  	(*------------------------------------------------------------*)
  	(* Valuations *)
  	(*------------------------------------------------------------*)
  (* 	& dClockHigh = 1000
   	& dClockLow = 1000

   	& dNot1Down = 147
   	& dNot1Up = 219
   	& dNot2Down = 163
   	& dNot2Up = 155
   	& dXorUp2Up = 147
   	& dXorDown1Up = 416
    	& dAndUp2 = 80
   	& dAndUp2 >= 0
   	& dAndDown1 = 155
   	& dLatchUp = 240
    	& dHold = 350
   	& dHold >= 0
   	& dSetup = 1*)
  ;
}


(************************************************************)
(* The end *)
(************************************************************)
end
