(************************************************************
 *                         IMITATOR
 *
 * Model of an "NOR" logical gate
 *
 * Author          : Étienne André
 * Created         : 2010/03/19
 * Last modified   : 2024/02/22
 *
 * IMITATOR version: 3.4
 ************************************************************)

var 	ckNor
		: clock;

	dNor_l, dNor_u
			: parameter;


(************************************************************)
  automaton norGate
(************************************************************)
actions: aUp, aDown, bUp, bDown,
	qUp, qDown;

(* Unstable state *)
loc Nor000: invariant ckNor <= dNor_u
	when True sync aUp do {} goto Nor100;
	when True sync bUp do {} goto Nor010;
	when ckNor >= dNor_l sync qUp do {} goto Nor001;

(* Stable state *)
loc Nor001: invariant True
	when True sync aUp do {ckNor := 0} goto Nor101;
	when True sync bUp do {ckNor := 0} goto Nor011;

(* Stable state *)
loc Nor010: invariant True
	when True sync aUp do {} goto Nor110;
	when True sync bDown do {ckNor := 0} goto Nor000;

(* Unstable state *)
loc Nor011: invariant ckNor <= dNor_u
	when True sync aUp do {ckNor := 0} goto Nor111;
	when True sync bDown do {} goto Nor001;
	when ckNor >= dNor_l sync qDown do {} goto Nor010;

(* Stable state *)
loc Nor100: invariant True
	when True sync aDown do {ckNor := 0} goto Nor000;
	when True sync bUp do {} goto Nor110;

(* Unstable state *)
loc Nor101: invariant ckNor <= dNor_u
	when True sync aDown do {} goto Nor001;
	when True sync bUp do {ckNor := 0} goto Nor111;
	when ckNor >= dNor_l sync qDown do {} goto Nor100;

(* Stable state *)
loc Nor110: invariant True
	when True sync aDown do {} goto Nor010;
	when True sync bDown do {} goto Nor100;

(* Unstable state *)
loc Nor111: invariant ckNor <= dNor_u
	when True sync aDown do {ckNor := 0} goto Nor011;
	when True sync bDown do {ckNor := 0} goto Nor101;
	when ckNor >= dNor_l sync qDown do {} goto Nor110;

end (*norGate*)



(************************************************************)
(* Initial state *)
(************************************************************)

init := {
  discrete =
  	(*------------------------------------------------------------*)
  	(* Initial location *)
  	(*------------------------------------------------------------*)
  	loc[norGate] := Nor001,
  ;

  continuous =
    (*------------------------------------------------------------*)
    (* Initial clock constraints *)
    (*------------------------------------------------------------*)
    & ckNor = 0

    (*------------------------------------------------------------*)
    (* Parameter constraints *)
    (*------------------------------------------------------------*)
    & dNor_l >= 0

    & dNor_l <= dNor_u
  ;
}

(************************************************************)
(* The end *)
(************************************************************)
end
