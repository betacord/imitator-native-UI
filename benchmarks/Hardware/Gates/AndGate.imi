(************************************************************
 *                         IMITATOR
 *
 * Model of an "AND" logical gate
 *
 * Author          : Christopher Makanga
 * Created         : 2014/08/28
 * Last modified   : 2024/02/22
 *
 * IMITATOR version: 3.4
 ************************************************************)

var 	ckAnd
		: clock;

	dAnd_l, dAnd_u
			: parameter;


(************************************************************)
  automaton AndGate
(************************************************************)
actions: i1Up, i1Down, i2Up, i2Down, sUp, sDown;

(* Stable *)
loc And000: invariant True
	when True sync i1Up do {} goto And100;
	when True sync i2Up do {} goto And010;

(* Untable *)
loc And001: invariant ckAnd <= dAnd_u
	when True sync i1Up do {ckAnd := 0} goto And101;
	when True sync i2Up do {ckAnd := 0} goto And011;
	when ckAnd >= dAnd_l sync sDown do {} goto And000;

(* Stable *)
loc And010: invariant True
	when True sync i1Up do {ckAnd := 0} goto And110;
	when True sync i2Down do {} goto And000;

(* Untable *)
loc And011: invariant ckAnd <= dAnd_u
	when True sync i1Up do {} goto And111;
	when True sync i2Down do {ckAnd := 0} goto And001;
	when ckAnd >= dAnd_l sync sDown do {} goto And010;

(* Stable *)
loc And100: invariant True
	when True sync i1Down do {} goto And000;
	when True sync i2Up do {ckAnd := 0} goto And110;

(* Untable *)
loc And101: invariant ckAnd <= dAnd_u
	when True sync i1Down do {ckAnd := 0} goto And001;
	when True sync i2Up do {} goto And111;
	when ckAnd >= dAnd_l sync sDown do {} goto And100;

(* Untable *)
loc And110: invariant ckAnd <= dAnd_u
	when True sync i1Down do {} goto And010;
	when True sync i2Down do {} goto And100;
	when ckAnd >= dAnd_l sync sUp do {} goto And111;

(* Stable *)
loc And111: invariant True
	when True sync i1Down do {ckAnd := 0} goto And011;
	when True sync i2Down do {ckAnd := 0} goto And101;

end (*AndGate*)



(************************************************************)
(* Analysis *)
(************************************************************)

init := {
	discrete =
		(*------------------------------------------------------------
		   INITIAL LOCATION
		  ------------------------------------------------------------*)
		loc[AndGate] := And000,
	;

	continuous =
		(*------------------------------------------------------------
		   INITIAL CLOCKS
		  ------------------------------------------------------------*)
		& ckAnd = 0

		(*------------------------------------------------------------
		   PARAMETER CONSTRAINTS
		  ------------------------------------------------------------*)
		& dAnd_l >= 0
		& dAnd_l <= dAnd_u
	;
}

end
