(************************************************************
 *                         IMITATOR
 *
 * Model of an "AND" logical gate
 *
 * Author          : Christopher Makanga
 * Created         : 2014/08/28
 * Last modified   : 2024/02/22
 *
 * IMITATOR version: 3.4
 ************************************************************)

var 	ckOr
		: clock;

	dOr_l, dOr_u
			: parameter;


(************************************************************)
  automaton OrGate
(************************************************************)
actions: i1Up, i1Down, i2Up, i2Down,
	sUp, sDown;

(* Stable *)
loc Or000: invariant True
	when True sync i1Up do {ckOr := 0} goto Or100;
	when True sync i2Up do {ckOr := 0} goto Or010;

(* Unstable *)
loc Or001: invariant ckOr <= dOr_u
	when True sync i1Up do {} goto Or101;
	when True sync i2Up do {} goto Or011;
	when ckOr >= dOr_l sync sDown do {} goto Or000;

(* Unstable *)
loc Or010: invariant ckOr <= dOr_u
	when True sync i1Up do {ckOr := 0} goto Or110;
	when True sync i2Down do {} goto Or000;
	when ckOr >= dOr_l sync sUp do {} goto Or011;

(* Stable *)
loc Or011: invariant True
	when True sync i1Up do {} goto Or111;
	when True sync i2Down do {ckOr := 0} goto Or001;

(* Unstable *)
loc Or100: invariant ckOr <= dOr_u
	when True sync i1Down do {} goto Or000;
	when True sync i2Up do {ckOr := 0} goto Or110;
	when ckOr >= dOr_l sync sUp do {} goto Or101;

(* Stable *)
loc Or101: invariant True
	when True sync i1Down do {ckOr := 0} goto Or001;
	when True sync i2Up do {} goto Or111;

(* Unstable *)
loc Or110: invariant ckOr <= dOr_u
	when True sync i1Down do {ckOr := 0} goto Or010;
	when True sync i2Down do {ckOr := 0} goto Or100;
	when ckOr >= dOr_l sync sUp do {} goto Or111;

(* Stable *)
loc Or111: invariant True
	when True sync i1Down do {} goto Or011;
	when True sync i2Down do {} goto Or101;

end (*OrGate*)




(************************************************************)
(* Analysis *)
(************************************************************)

init := {
	discrete =
		(*------------------------------------------------------------
		   INITIAL LOCATION
		  ------------------------------------------------------------*)
		loc[OrGate] := Or000,
	;

	continuous =
		(*------------------------------------------------------------
		   INITIAL CLOCKS
		  ------------------------------------------------------------*)
		& ckOr = 0

		(*------------------------------------------------------------
		   PARAMETER CONSTRAINTS
		  ------------------------------------------------------------*)
		& dOr_l >= 0
		& dOr_l <= dOr_u
	;
}

end
