(************************************************************
 *                      IMITATOR MODEL
 *
 * Parametric version of Fig.16 from [LALSD14]
 *
 * Description     : Fig.16 from "Learning Assumptions for Compositional Verification of Timed Systems" [LALSD14]. Added a parametric deadline in the proprety. Note that this is a U-PTA, except if the deadline is set as a parameter (pdeadline).
 * Correctness     : Pviolated not reachable
 * Source          : "Learning Assumptions for Compositional Verification of Timed Systems" [LALSD14]
 * Author          : Lin Shang-Wei
 * Modeling        : Lin Shang-Wei + Étienne André
 * Input by        : Étienne André
 * License         : Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)

 *
 * Created         : 2016/07/01
 * Last modified   : 2024/02/22
 *
 * IMITATOR version: 3.4
 ************************************************************)

var

(* Clocks *)
 	xa, xi, xo, xs
		: clock;

(* Parameters *)
	pdeadline = 5,
	pack = 1,       (* time from output to ack *)
	pinput (*= 1*), (* time from ack to input *)
	poutput = 1,    (* time from send to output *)
	psend (*= 1*),  (* time from input to send *)
		: parameter;



(************************************************************)
  automaton input
(************************************************************)
actions: input, send, ack;

loc I0: invariant True
	when xa <= pinput sync input do {xi := 0} goto I1;

loc I1: invariant True
	when xi <= psend sync send do {xs := 0} goto I2;

loc I2: invariant True
	when True sync ack do {xa := 0} goto I0;

end (* input *)

(************************************************************)
  automaton output
(************************************************************)
actions: output, send, ack;

loc O0: invariant True
	when True sync send do {xs := 0} goto O1;

loc O1: invariant True
	when xs <= poutput sync output do {xo := 0} goto O2;

loc O2: invariant True
	when xo <= pack sync ack do {xa := 0} goto O0;

end (* output *)

(************************************************************)
  automaton Mphihat
(************************************************************)
actions: input, output;

loc P0: invariant True
	when xo > pdeadline sync input do {xi := 0} goto Pviolated;
	when True sync output do {xo := 0} goto Pviolated;
	when xo <= pdeadline sync input do {xi := 0} goto P1;

loc P1: invariant True
	when xi <= pdeadline sync output do {xo := 0} goto P0;
	when xi > pdeadline sync output do {xo := 0} goto Pviolated;
	when True sync input do {xi := 0} goto Pviolated;

loc Pviolated: invariant True

end (* Mphihat *)



(************************************************************)
(* Initial state *)
(************************************************************)

init := {

  discrete =
  	(* Initial location *)
  	loc[input] := I0,
  	loc[output] := O0,
  	loc[Mphihat] := P0,
  ;

  continuous =
  	(* Initial clock constraints *)
  	& xa = 0
  	& xi = 0
  	& xo = 0
  	& xs = 0

  	(* Parameter constraints *)
  	& pdeadline >= 0
  	& pack      >= 0
  	& pinput    >= 0
  	& poutput   >= 0
  	& psend     >= 0
  ;
}

(************************************************************)
(* The end *)
(************************************************************)
end
