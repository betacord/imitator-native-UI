(************************************************************
 *                      IMITATOR MODEL
 *
 * Empty template of a case study
 *
 * Description     : Example with 1 parameter and 3 clocks over bounded time
 * Correctness     : lbad unreachable
 * Source          : Own work
 * Author          : Étienne André
 * Modeling        : Étienne André
 * Input by        : Étienne André
 *
 * Created         : 2015/12/01
 * Last modified   : 2024/02/22
 *
 * IMITATOR version: 3.4
 ************************************************************)

var

(* Clocks *)
 	x, y, z, t
		: clock;

(* Parameters *)
	p
		: parameter;


(* Constant for bounded-time analysis *)
	T = 10
		: constant;


(************************************************************)
  automaton pta
(************************************************************)

loc l1: invariant True
	when x <= p goto l1;
	when y = p do {z := 0} goto l2;

loc l2: invariant True
	when z >= p do {y := 0} goto l2;
	when z = 0 goto l1;
	when y < p goto l3;

loc l3: invariant True
	when y = p do {y := 0} goto l3;
	when z = 1 do {z := 0} goto l3;
	when z = 1 goto lbad;
	when x = 1 goto l2;

loc lbad: invariant True
end (* pta *)



(************************************************************)
  automaton timechecker
(************************************************************)
actions: time_limit;

loc running: invariant t <= T
(*	when t = T do {t := 0} sync time_limit goto blocked;

loc blocked: invariant t <= 0*)
end (* timechecker *)


(************************************************************)
(* Initial state *)
(************************************************************)

init := {
  discrete =
  	(*------------------------------------------------------------*)
  	(* Initial location *)
  	(*------------------------------------------------------------*)
  	loc[pta]			:= l1,
  	loc[timechecker]	:= running,
  ;

  continuous =
  	(*------------------------------------------------------------*)
  	(* Initial clock constraints *)
  	(*------------------------------------------------------------*)
  	& x = 0
  	& y = 0
  	& z = 0
  	& t = 0

  	(*------------------------------------------------------------*)
  	(* Parameter constraints *)
  	(*------------------------------------------------------------*)
  	& p >= 0
  ;
}

(************************************************************)
(* The end *)
(************************************************************)
end
