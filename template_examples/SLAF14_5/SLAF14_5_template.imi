(*******************************************************************************
 *                                IMITATOR MODEL                               
 * 
 * Title            : SLAF14_5
 * Description      : 
 * Correctness      : System must be schedulable
 * Scalable         : yes
 * Generated        : 
 * Categories       : Academic ; Protocol ; RTS
 * Source           : 
 * bibkey           : SLAF14
 * Author           : Giuseppe Lipari
 * Modeling         : 
 * Input by         : 
 * License          : 
 * 
 * Created          : < 2015/10/30
 * Last modified    : 2021/08/30
 * Model version    : 
 * 
 * IMITATOR version : 3.1
 ******************************************************************************)





var
    t1_c, t1_d, t1_urgent, t1_arr_x, t2_c, t2_d, t2_urgent, t2_arr_x, t3_c, t3_d, t3_urgent, t3_arr_x, t4_c, t4_d, t4_urgent, t4_arr_x, t5_c, t5_d, t5_urgent, t5_arr_x, CPU1_urgent : clock;
    t1_C = 2, t1_arr_P = 8, t2_C = 5, t2_arr_P = 20, t3_C = 8, t3_arr_P = 50, t4_C, t4_arr_P = 100, t5_C, t5_arr_P = 200 : parameter;

template Task_t(t_arr_event : action, t_urgent : clock, t_c : clock, t_d : clock, t_C : parameter, t_arr_P : parameter)
actions : t_arr_event , t_arr , t_dis , t_pre , t_end , t_miss;
loc t_loc_idle : invariant True
    when True sync t_arr_event do { t_urgent := 0 } goto t_loc_act_event;
loc t_loc_act_event : invariant t_urgent <= 0
    when t_urgent = 0 sync t_arr do { t_c := 0 , t_d := 0 } goto t_loc_act;
loc t_loc_act : invariant t_d <= t_arr_P stop { t_c }
    when True sync t_dis  goto t_loc_exe;
    when t_d  >=  t_arr_P sync t_miss  goto t_loc_miss;
loc t_loc_exe : invariant t_d <= t_arr_P & t_c <= t_C
    when t_c<t_C sync t_pre  goto t_loc_act;
    when t_d >= t_arr_P & t_c < t_C sync t_miss  goto t_loc_miss;
    when t_c = t_C sync t_end  goto t_loc_idle;
loc t_loc_miss : invariant True
end

template Periodic_t_arr(t_arr_event: action, t_arr_x: clock, t_arr_P: parameter)
actions : t_arr_event;
loc t_arr_loc_arr : invariant t_arr_x<=t_arr_P
    when t_arr_x=t_arr_P sync t_arr_event do { t_arr_x :=  0 } goto t_arr_loc_arr;
end

instantiate Task_t1 := Task_t(t1_arr_event, t1_urgent, t1_c, t1_d, t1_C, t1_arr_P);
instantiate Periodic_t1_arr := Periodic_t_arr(t1_arr_event, t1_arr_x, t1_arr_P);

instantiate Task_t2 := Task_t(t2_arr_event, t2_urgent, t2_c, t2_d, t2_C, t2_arr_P);
instantiate Periodic_t2_arr := Periodic_t_arr(t2_arr_event, t2_arr_x, t2_arr_P);

instantiate Task_t3 := Task_t(t3_arr_event, t3_urgent, t3_c, t3_d, t3_C, t3_arr_P);
instantiate Periodic_t3_arr := Periodic_t_arr(t3_arr_event, t3_arr_x, t3_arr_P);

instantiate Task_t4 := Task_t(t4_arr_event, t4_urgent, t4_c, t4_d, t4_C, t4_arr_P);
instantiate Periodic_t4_arr := Periodic_t_arr(t4_arr_event, t4_arr_x, t4_arr_P);

instantiate Task_t5 := Task_t(t5_arr_event, t5_urgent, t5_c, t5_d, t5_C, t5_arr_P);
instantiate Periodic_t5_arr := Periodic_t_arr(t5_arr_event, t5_arr_x, t5_arr_P);

automaton sched_CPU1
actions : t1_arr, t1_dis, t1_pre, t1_end, t2_arr, t2_dis, t2_pre, t2_end, t3_arr, t3_dis, t3_pre, t3_end, t4_arr, t4_dis, t4_pre, t4_end, t5_arr, t5_dis, t5_pre, t5_end;
loc CPU1_loc_ : invariant True
    when True sync t1_arr do {CPU1_urgent := 0} goto CPU1_loc_At1;
    when True sync t2_arr do {CPU1_urgent := 0} goto CPU1_loc_At2;
    when True sync t3_arr do {CPU1_urgent := 0} goto CPU1_loc_At3;
    when True sync t4_arr do {CPU1_urgent := 0} goto CPU1_loc_At4;
    when True sync t5_arr do {CPU1_urgent := 0} goto CPU1_loc_At5;
loc CPU1_loc_At1 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t1_dis goto CPU1_loc_Rt1;
loc CPU1_loc_At2 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t2_dis goto CPU1_loc_Rt2;
loc CPU1_loc_At3 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t3_dis goto CPU1_loc_Rt3;
loc CPU1_loc_At4 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t4_dis goto CPU1_loc_Rt4;
loc CPU1_loc_At5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t5_dis goto CPU1_loc_Rt5;

loc CPU1_loc_Rt5 : invariant True
    when True sync t1_arr do {CPU1_urgent := 0} goto CPU1_loc_At1Rt5;
    when True sync t2_arr do {CPU1_urgent := 0} goto CPU1_loc_At2Rt5;
    when True sync t3_arr do {CPU1_urgent := 0} goto CPU1_loc_At3Rt5;
    when True sync t4_arr do {CPU1_urgent := 0} goto CPU1_loc_At4Rt5;
    when True sync t5_end do { CPU1_urgent := 0 } goto CPU1_loc_Et5;
loc CPU1_loc_Et5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0   goto CPU1_loc_stop;
loc CPU1_loc_At1Rt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t5_pre goto CPU1_loc_At1Wt5;
loc CPU1_loc_At1Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t1_dis goto CPU1_loc_Rt1Wt5;
loc CPU1_loc_At2Rt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t5_pre goto CPU1_loc_At2Wt5;
loc CPU1_loc_At2Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t2_dis goto CPU1_loc_Rt2Wt5;
loc CPU1_loc_At3Rt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t5_pre goto CPU1_loc_At3Wt5;
loc CPU1_loc_At3Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t3_dis goto CPU1_loc_Rt3Wt5;
loc CPU1_loc_At4Rt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t5_pre goto CPU1_loc_At4Wt5;
loc CPU1_loc_At4Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t4_dis goto CPU1_loc_Rt4Wt5;

loc CPU1_loc_Rt4 : invariant True
    when True sync t1_arr do {CPU1_urgent := 0} goto CPU1_loc_At1Rt4;
    when True sync t2_arr do {CPU1_urgent := 0} goto CPU1_loc_At2Rt4;
    when True sync t3_arr do {CPU1_urgent := 0} goto CPU1_loc_At3Rt4;
    when True sync t5_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt4Wt5;
    when True sync t4_end do { CPU1_urgent := 0 } goto CPU1_loc_Et4;
loc CPU1_loc_Et4 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0   goto CPU1_loc_stop;
loc CPU1_loc_At1Rt4 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t4_pre goto CPU1_loc_At1Wt4;
loc CPU1_loc_At1Wt4 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t1_dis goto CPU1_loc_Rt1Wt4;
loc CPU1_loc_At2Rt4 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t4_pre goto CPU1_loc_At2Wt4;
loc CPU1_loc_At2Wt4 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t2_dis goto CPU1_loc_Rt2Wt4;
loc CPU1_loc_At3Rt4 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t4_pre goto CPU1_loc_At3Wt4;
loc CPU1_loc_At3Wt4 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t3_dis goto CPU1_loc_Rt3Wt4;

loc CPU1_loc_Rt4Wt5 : invariant True
    when True sync t1_arr do {CPU1_urgent := 0} goto CPU1_loc_At1Rt4Wt5;
    when True sync t2_arr do {CPU1_urgent := 0} goto CPU1_loc_At2Rt4Wt5;
    when True sync t3_arr do {CPU1_urgent := 0} goto CPU1_loc_At3Rt4Wt5;
    when True sync t4_end do { CPU1_urgent := 0 } goto CPU1_loc_Et4Wt5;
loc CPU1_loc_Et4Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t5_dis  goto CPU1_loc_Rt5;
loc CPU1_loc_At1Rt4Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t4_pre goto CPU1_loc_At1Wt4Wt5;
loc CPU1_loc_At1Wt4Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t1_dis goto CPU1_loc_Rt1Wt4Wt5;
loc CPU1_loc_At2Rt4Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t4_pre goto CPU1_loc_At2Wt4Wt5;
loc CPU1_loc_At2Wt4Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t2_dis goto CPU1_loc_Rt2Wt4Wt5;
loc CPU1_loc_At3Rt4Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t4_pre goto CPU1_loc_At3Wt4Wt5;
loc CPU1_loc_At3Wt4Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t3_dis goto CPU1_loc_Rt3Wt4Wt5;

loc CPU1_loc_Rt3 : invariant True
    when True sync t1_arr do {CPU1_urgent := 0} goto CPU1_loc_At1Rt3;
    when True sync t2_arr do {CPU1_urgent := 0} goto CPU1_loc_At2Rt3;
    when True sync t4_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt3Wt4;
    when True sync t5_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt3Wt5;
    when True sync t3_end do { CPU1_urgent := 0 } goto CPU1_loc_Et3;
loc CPU1_loc_Et3 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0   goto CPU1_loc_stop;
loc CPU1_loc_At1Rt3 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t3_pre goto CPU1_loc_At1Wt3;
loc CPU1_loc_At1Wt3 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t1_dis goto CPU1_loc_Rt1Wt3;
loc CPU1_loc_At2Rt3 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t3_pre goto CPU1_loc_At2Wt3;
loc CPU1_loc_At2Wt3 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t2_dis goto CPU1_loc_Rt2Wt3;

loc CPU1_loc_Rt3Wt5 : invariant True
    when True sync t1_arr do {CPU1_urgent := 0} goto CPU1_loc_At1Rt3Wt5;
    when True sync t2_arr do {CPU1_urgent := 0} goto CPU1_loc_At2Rt3Wt5;
    when True sync t4_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt3Wt4Wt5;
    when True sync t3_end do { CPU1_urgent := 0 } goto CPU1_loc_Et3Wt5;
loc CPU1_loc_Et3Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t5_dis  goto CPU1_loc_Rt5;
loc CPU1_loc_At1Rt3Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t3_pre goto CPU1_loc_At1Wt3Wt5;
loc CPU1_loc_At1Wt3Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t1_dis goto CPU1_loc_Rt1Wt3Wt5;
loc CPU1_loc_At2Rt3Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t3_pre goto CPU1_loc_At2Wt3Wt5;
loc CPU1_loc_At2Wt3Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t2_dis goto CPU1_loc_Rt2Wt3Wt5;

loc CPU1_loc_Rt3Wt4 : invariant True
    when True sync t1_arr do {CPU1_urgent := 0} goto CPU1_loc_At1Rt3Wt4;
    when True sync t2_arr do {CPU1_urgent := 0} goto CPU1_loc_At2Rt3Wt4;
    when True sync t5_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt3Wt4Wt5;
    when True sync t3_end do { CPU1_urgent := 0 } goto CPU1_loc_Et3Wt4;
loc CPU1_loc_Et3Wt4 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t4_dis  goto CPU1_loc_Rt4;
loc CPU1_loc_At1Rt3Wt4 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t3_pre goto CPU1_loc_At1Wt3Wt4;
loc CPU1_loc_At1Wt3Wt4 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t1_dis goto CPU1_loc_Rt1Wt3Wt4;
loc CPU1_loc_At2Rt3Wt4 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t3_pre goto CPU1_loc_At2Wt3Wt4;
loc CPU1_loc_At2Wt3Wt4 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t2_dis goto CPU1_loc_Rt2Wt3Wt4;

loc CPU1_loc_Rt3Wt4Wt5 : invariant True
    when True sync t1_arr do {CPU1_urgent := 0} goto CPU1_loc_At1Rt3Wt4Wt5;
    when True sync t2_arr do {CPU1_urgent := 0} goto CPU1_loc_At2Rt3Wt4Wt5;
    when True sync t3_end do { CPU1_urgent := 0 } goto CPU1_loc_Et3Wt4Wt5;
loc CPU1_loc_Et3Wt4Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t4_dis  goto CPU1_loc_Rt4Wt5;
loc CPU1_loc_At1Rt3Wt4Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t3_pre goto CPU1_loc_At1Wt3Wt4Wt5;
loc CPU1_loc_At1Wt3Wt4Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t1_dis goto CPU1_loc_Rt1Wt3Wt4Wt5;
loc CPU1_loc_At2Rt3Wt4Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t3_pre goto CPU1_loc_At2Wt3Wt4Wt5;
loc CPU1_loc_At2Wt3Wt4Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t2_dis goto CPU1_loc_Rt2Wt3Wt4Wt5;

loc CPU1_loc_Rt2 : invariant True
    when True sync t1_arr do {CPU1_urgent := 0} goto CPU1_loc_At1Rt2;
    when True sync t3_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt2Wt3;
    when True sync t4_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt2Wt4;
    when True sync t5_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt2Wt5;
    when True sync t2_end do { CPU1_urgent := 0 } goto CPU1_loc_Et2;
loc CPU1_loc_Et2 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0   goto CPU1_loc_stop;
loc CPU1_loc_At1Rt2 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t2_pre goto CPU1_loc_At1Wt2;
loc CPU1_loc_At1Wt2 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t1_dis goto CPU1_loc_Rt1Wt2;

loc CPU1_loc_Rt2Wt5 : invariant True
    when True sync t1_arr do {CPU1_urgent := 0} goto CPU1_loc_At1Rt2Wt5;
    when True sync t3_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt2Wt3Wt5;
    when True sync t4_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt2Wt4Wt5;
    when True sync t2_end do { CPU1_urgent := 0 } goto CPU1_loc_Et2Wt5;
loc CPU1_loc_Et2Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t5_dis  goto CPU1_loc_Rt5;
loc CPU1_loc_At1Rt2Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t2_pre goto CPU1_loc_At1Wt2Wt5;
loc CPU1_loc_At1Wt2Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t1_dis goto CPU1_loc_Rt1Wt2Wt5;

loc CPU1_loc_Rt2Wt4 : invariant True
    when True sync t1_arr do {CPU1_urgent := 0} goto CPU1_loc_At1Rt2Wt4;
    when True sync t3_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt2Wt3Wt4;
    when True sync t5_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt2Wt4Wt5;
    when True sync t2_end do { CPU1_urgent := 0 } goto CPU1_loc_Et2Wt4;
loc CPU1_loc_Et2Wt4 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t4_dis  goto CPU1_loc_Rt4;
loc CPU1_loc_At1Rt2Wt4 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t2_pre goto CPU1_loc_At1Wt2Wt4;
loc CPU1_loc_At1Wt2Wt4 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t1_dis goto CPU1_loc_Rt1Wt2Wt4;

loc CPU1_loc_Rt2Wt4Wt5 : invariant True
    when True sync t1_arr do {CPU1_urgent := 0} goto CPU1_loc_At1Rt2Wt4Wt5;
    when True sync t3_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt2Wt3Wt4Wt5;
    when True sync t2_end do { CPU1_urgent := 0 } goto CPU1_loc_Et2Wt4Wt5;
loc CPU1_loc_Et2Wt4Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t4_dis  goto CPU1_loc_Rt4Wt5;
loc CPU1_loc_At1Rt2Wt4Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t2_pre goto CPU1_loc_At1Wt2Wt4Wt5;
loc CPU1_loc_At1Wt2Wt4Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t1_dis goto CPU1_loc_Rt1Wt2Wt4Wt5;

loc CPU1_loc_Rt2Wt3 : invariant True
    when True sync t1_arr do {CPU1_urgent := 0} goto CPU1_loc_At1Rt2Wt3;
    when True sync t4_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt2Wt3Wt4;
    when True sync t5_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt2Wt3Wt5;
    when True sync t2_end do { CPU1_urgent := 0 } goto CPU1_loc_Et2Wt3;
loc CPU1_loc_Et2Wt3 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t3_dis  goto CPU1_loc_Rt3;
loc CPU1_loc_At1Rt2Wt3 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t2_pre goto CPU1_loc_At1Wt2Wt3;
loc CPU1_loc_At1Wt2Wt3 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t1_dis goto CPU1_loc_Rt1Wt2Wt3;

loc CPU1_loc_Rt2Wt3Wt5 : invariant True
    when True sync t1_arr do {CPU1_urgent := 0} goto CPU1_loc_At1Rt2Wt3Wt5;
    when True sync t4_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt2Wt3Wt4Wt5;
    when True sync t2_end do { CPU1_urgent := 0 } goto CPU1_loc_Et2Wt3Wt5;
loc CPU1_loc_Et2Wt3Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t3_dis  goto CPU1_loc_Rt3Wt5;
loc CPU1_loc_At1Rt2Wt3Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t2_pre goto CPU1_loc_At1Wt2Wt3Wt5;
loc CPU1_loc_At1Wt2Wt3Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t1_dis goto CPU1_loc_Rt1Wt2Wt3Wt5;

loc CPU1_loc_Rt2Wt3Wt4 : invariant True
    when True sync t1_arr do {CPU1_urgent := 0} goto CPU1_loc_At1Rt2Wt3Wt4;
    when True sync t5_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt2Wt3Wt4Wt5;
    when True sync t2_end do { CPU1_urgent := 0 } goto CPU1_loc_Et2Wt3Wt4;
loc CPU1_loc_Et2Wt3Wt4 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t3_dis  goto CPU1_loc_Rt3Wt4;
loc CPU1_loc_At1Rt2Wt3Wt4 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t2_pre goto CPU1_loc_At1Wt2Wt3Wt4;
loc CPU1_loc_At1Wt2Wt3Wt4 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t1_dis goto CPU1_loc_Rt1Wt2Wt3Wt4;

loc CPU1_loc_Rt2Wt3Wt4Wt5 : invariant True
    when True sync t1_arr do {CPU1_urgent := 0} goto CPU1_loc_At1Rt2Wt3Wt4Wt5;
    when True sync t2_end do { CPU1_urgent := 0 } goto CPU1_loc_Et2Wt3Wt4Wt5;
loc CPU1_loc_Et2Wt3Wt4Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t3_dis  goto CPU1_loc_Rt3Wt4Wt5;
loc CPU1_loc_At1Rt2Wt3Wt4Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t2_pre goto CPU1_loc_At1Wt2Wt3Wt4Wt5;
loc CPU1_loc_At1Wt2Wt3Wt4Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t1_dis goto CPU1_loc_Rt1Wt2Wt3Wt4Wt5;

loc CPU1_loc_Rt1 : invariant True
    when True sync t2_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt2;
    when True sync t3_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt3;
    when True sync t4_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt4;
    when True sync t5_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt5;
    when True sync t1_end do { CPU1_urgent := 0 } goto CPU1_loc_Et1;
loc CPU1_loc_Et1 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0   goto CPU1_loc_stop;

loc CPU1_loc_Rt1Wt5 : invariant True
    when True sync t2_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt2Wt5;
    when True sync t3_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt3Wt5;
    when True sync t4_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt4Wt5;
    when True sync t1_end do { CPU1_urgent := 0 } goto CPU1_loc_Et1Wt5;
loc CPU1_loc_Et1Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t5_dis  goto CPU1_loc_Rt5;

loc CPU1_loc_Rt1Wt4 : invariant True
    when True sync t2_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt2Wt4;
    when True sync t3_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt3Wt4;
    when True sync t5_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt4Wt5;
    when True sync t1_end do { CPU1_urgent := 0 } goto CPU1_loc_Et1Wt4;
loc CPU1_loc_Et1Wt4 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t4_dis  goto CPU1_loc_Rt4;

loc CPU1_loc_Rt1Wt4Wt5 : invariant True
    when True sync t2_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt2Wt4Wt5;
    when True sync t3_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt3Wt4Wt5;
    when True sync t1_end do { CPU1_urgent := 0 } goto CPU1_loc_Et1Wt4Wt5;
loc CPU1_loc_Et1Wt4Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t4_dis  goto CPU1_loc_Rt4Wt5;

loc CPU1_loc_Rt1Wt3 : invariant True
    when True sync t2_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt2Wt3;
    when True sync t4_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt3Wt4;
    when True sync t5_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt3Wt5;
    when True sync t1_end do { CPU1_urgent := 0 } goto CPU1_loc_Et1Wt3;
loc CPU1_loc_Et1Wt3 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t3_dis  goto CPU1_loc_Rt3;

loc CPU1_loc_Rt1Wt3Wt5 : invariant True
    when True sync t2_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt2Wt3Wt5;
    when True sync t4_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt3Wt4Wt5;
    when True sync t1_end do { CPU1_urgent := 0 } goto CPU1_loc_Et1Wt3Wt5;
loc CPU1_loc_Et1Wt3Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t3_dis  goto CPU1_loc_Rt3Wt5;

loc CPU1_loc_Rt1Wt3Wt4 : invariant True
    when True sync t2_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt2Wt3Wt4;
    when True sync t5_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt3Wt4Wt5;
    when True sync t1_end do { CPU1_urgent := 0 } goto CPU1_loc_Et1Wt3Wt4;
loc CPU1_loc_Et1Wt3Wt4 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t3_dis  goto CPU1_loc_Rt3Wt4;

loc CPU1_loc_Rt1Wt3Wt4Wt5 : invariant True
    when True sync t2_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt2Wt3Wt4Wt5;
    when True sync t1_end do { CPU1_urgent := 0 } goto CPU1_loc_Et1Wt3Wt4Wt5;
loc CPU1_loc_Et1Wt3Wt4Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t3_dis  goto CPU1_loc_Rt3Wt4Wt5;

loc CPU1_loc_Rt1Wt2 : invariant True
    when True sync t3_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt2Wt3;
    when True sync t4_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt2Wt4;
    when True sync t5_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt2Wt5;
    when True sync t1_end do { CPU1_urgent := 0 } goto CPU1_loc_Et1Wt2;
loc CPU1_loc_Et1Wt2 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t2_dis  goto CPU1_loc_Rt2;

loc CPU1_loc_Rt1Wt2Wt5 : invariant True
    when True sync t3_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt2Wt3Wt5;
    when True sync t4_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt2Wt4Wt5;
    when True sync t1_end do { CPU1_urgent := 0 } goto CPU1_loc_Et1Wt2Wt5;
loc CPU1_loc_Et1Wt2Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t2_dis  goto CPU1_loc_Rt2Wt5;

loc CPU1_loc_Rt1Wt2Wt4 : invariant True
    when True sync t3_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt2Wt3Wt4;
    when True sync t5_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt2Wt4Wt5;
    when True sync t1_end do { CPU1_urgent := 0 } goto CPU1_loc_Et1Wt2Wt4;
loc CPU1_loc_Et1Wt2Wt4 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t2_dis  goto CPU1_loc_Rt2Wt4;

loc CPU1_loc_Rt1Wt2Wt4Wt5 : invariant True
    when True sync t3_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt2Wt3Wt4Wt5;
    when True sync t1_end do { CPU1_urgent := 0 } goto CPU1_loc_Et1Wt2Wt4Wt5;
loc CPU1_loc_Et1Wt2Wt4Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t2_dis  goto CPU1_loc_Rt2Wt4Wt5;

loc CPU1_loc_Rt1Wt2Wt3 : invariant True
    when True sync t4_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt2Wt3Wt4;
    when True sync t5_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt2Wt3Wt5;
    when True sync t1_end do { CPU1_urgent := 0 } goto CPU1_loc_Et1Wt2Wt3;
loc CPU1_loc_Et1Wt2Wt3 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t2_dis  goto CPU1_loc_Rt2Wt3;

loc CPU1_loc_Rt1Wt2Wt3Wt5 : invariant True
    when True sync t4_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt2Wt3Wt4Wt5;
    when True sync t1_end do { CPU1_urgent := 0 } goto CPU1_loc_Et1Wt2Wt3Wt5;
loc CPU1_loc_Et1Wt2Wt3Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t2_dis  goto CPU1_loc_Rt2Wt3Wt5;

loc CPU1_loc_Rt1Wt2Wt3Wt4 : invariant True
    when True sync t5_arr do {CPU1_urgent := 0} goto CPU1_loc_Rt1Wt2Wt3Wt4Wt5;
    when True sync t1_end do { CPU1_urgent := 0 } goto CPU1_loc_Et1Wt2Wt3Wt4;
loc CPU1_loc_Et1Wt2Wt3Wt4 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t2_dis  goto CPU1_loc_Rt2Wt3Wt4;

loc CPU1_loc_Rt1Wt2Wt3Wt4Wt5 : invariant True
    when True sync t1_end do { CPU1_urgent := 0 } goto CPU1_loc_Et1Wt2Wt3Wt4Wt5;
loc CPU1_loc_Et1Wt2Wt3Wt4Wt5 : invariant CPU1_urgent <= 0
    when CPU1_urgent = 0 sync t2_dis  goto CPU1_loc_Rt2Wt3Wt4Wt5;

loc CPU1_loc_stop : invariant True
end



automaton OBS_dline
actions : t1_miss , t2_miss , t3_miss , t4_miss , t5_miss;
loc dline_loc_nomiss : invariant True
    when True sync t1_miss  do {t1_d := 0} goto dline_loc_miss;
    when True sync t2_miss  do {t1_d := 0} goto dline_loc_miss;
    when True sync t3_miss  do {t1_d := 0} goto dline_loc_miss;
    when True sync t4_miss  do {t1_d := 0} goto dline_loc_miss;
    when True sync t5_miss  do {t1_d := 0} goto dline_loc_miss;
loc dline_loc_miss : invariant t1_d=0 stop{t1_d}
end


init := {

	discrete =
		(*------------------------------------------------------------*)
		(* Initial location *)
		(*------------------------------------------------------------*)
		loc[Task_t1] := t_loc_idle,
		loc[Periodic_t1_arr] := t_arr_loc_arr,
		loc[Task_t2] := t_loc_idle,
		loc[Periodic_t2_arr] := t_arr_loc_arr,
		loc[Task_t3] := t_loc_idle,
		loc[Periodic_t3_arr] := t_arr_loc_arr,
		loc[Task_t4] := t_loc_idle,
		loc[Periodic_t4_arr] := t_arr_loc_arr,
		loc[Task_t5] := t_loc_idle,
		loc[Periodic_t5_arr] := t_arr_loc_arr,
		loc[sched_CPU1] := CPU1_loc_,
		loc[OBS_dline] := dline_loc_nomiss,
		(*------------------------------------------------------------*)
		(* Initial discrete variables assignments *)
		(*------------------------------------------------------------*)

	;

	(*------------------------------------------------------------*)
	(* Initial continuous constraint *)
	(*------------------------------------------------------------*)
	continuous =
		&  t5_C >= 10
    & t4_C >= 10
    & 50 >= t5_C
    & 50 >= t4_C
    & t1_c = 0
    & t1_d = 0
    & t1_urgent = 0
    & t1_arr_x = 8
    & t2_c = 0
    & t2_d = 0
    & t2_urgent = 0
    & t2_arr_x = 20
    & t3_c = 0
    & t3_d = 0
    & t3_urgent = 0
    & t3_arr_x = 50
    & t4_c = 0
    & t4_d = 0
    & t4_urgent = 0
    & t4_arr_x = 100
    & t5_c = 0
    & t5_d = 0
    & t5_urgent = 0
    & t5_arr_x = 200
    & CPU1_urgent = 0
	;
}

(************************************************************)
(* The end *)
(************************************************************)
end
