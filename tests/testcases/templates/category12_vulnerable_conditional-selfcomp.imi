(************************************************************
 *                      IMITATOR MODEL                      
 *
 * Case study for side channel timing attack
 *
 * Description     : Encoding of a java program.
 * Correctness     : No information leakage
 * Source          : https://github.com/Apogee-Research/STAC/blob/master/Canonical_Examples/Source/Category2_not_vulnerable.java
 * Author          : https://github.com/Apogee-Research/STAC
 * Modeling        : Sun Jun, Étienne André, Li Jiaying
 * Input by        : Li Jiaying, Étienne André
 * License         : MIT License
 *
 * Created         : 2018/11/16
 * Last modified   : 2024/01/22
 *
 * IMITATOR version: 3.4-beta
 ************************************************************)

var

(* Clocks *)
 	cl_1,
 	cl_2,

 	abs_clock,
		: clock;

(* Discrete *)
	flag_1,
	flag_2,
		: bool;

(* Parameters *)
	(* Global parameters necessary for the general encoding and our method *)
	epsilon,
 	abs_ptime,

 	(* Local parameters to encode symbolic data *)
	xnonletters_1,
	userInput_length_1,
	first_mismatch_1,

	xnonletters_2,
	userInput_length_2,
	first_mismatch_2,
		: parameter;

	maxInputLen = 10,
	
	delay = 5000000,
	delay2 = 80000,
	
		: constant;

(* Analyzing manually the code:
	private static void checkChar(String candidate, int charNumber) {
        if (charNumber > password.length()) {
            exceedPasswordLen++;
        } else if (password.charAt(charNumber - 1) == candidate.charAt(charNumber - 1)) {
			/* executed for each char until the first incorrect char */
            if (subsequentCorrect + 1 == charNumber) {
                subsequentCorrect++;
                delay();
            }
        }
} *)

template pta(flag : bool, cl : clock, xnonletters : parameter, userInput_length : parameter, first_mismatch : parameter)

actions: setupserver, readx, verifycredentials;

(*server = new ServerSocket(port);
Socket client;
PrintWriter out;
BufferedReader in;
String userInput;
boolean correct;*)
loc l1: invariant cl <= epsilon 
	when cl <= epsilon do {cl := 0} sync setupserver goto l2;

(*client = server.accept();
out = new PrintWriter(client.getOutputStream(), true);
in = new BufferedReader(new InputStreamReader(client.getInputStream()));

userInput = in.readLine();*)
loc l2: invariant cl <= epsilon
	when cl <= epsilon do {cl := 0} sync readx goto l3;

(*  if (userInput.length() <= maxInputLen && userInput.matches("[a-z]+")) { *)
loc l3: invariant cl <= epsilon
	when cl <= epsilon & userInput_length > maxInputLen do {cl := 0} goto final1;
	when cl <= epsilon & xnonletters > 0 do {cl := 0} goto final1;
	when cl <= epsilon & userInput_length <= maxInputLen & xnonletters = 0 do {cl := 0} goto l4;

(*  out.println("Invalid Input"); *)
loc final1: invariant True

(*  correct = verifyCredentials(userInput); *)
loc l4: invariant cl <= epsilon
	when cl <= epsilon do {cl := 0} sync verifycredentials goto l5;

(*  subsequentCorrect = exceedPasswordLen = 0; *)
loc l5: invariant cl <= epsilon
	(* Duplicate to ensure first_mismatch is an integer *)
	(* Case incorrect password *)
	when cl <= epsilon & first_mismatch = 0 do {cl := 0} goto l6;
	when cl <= epsilon & first_mismatch = 1 do {cl := 0} goto l6;
	when cl <= epsilon & first_mismatch = 2 do {cl := 0} goto l6;
	when cl <= epsilon & first_mismatch = 3 do {cl := 0} goto l6;
	when cl <= epsilon & first_mismatch = 4 do {cl := 0} goto l6;
	when cl <= epsilon & first_mismatch = 5 do {cl := 0} goto l6;
	when cl <= epsilon & first_mismatch = 6 do {cl := 0} goto l6;
	when cl <= epsilon & first_mismatch = 7 do {cl := 0} goto l6;
	when cl <= epsilon & first_mismatch = 8 do {cl := 0} goto l6;
	when cl <= epsilon & first_mismatch = 9 do {cl := 0} goto l6;
	(* Case correct password *)
	when cl <= epsilon & first_mismatch = 10 & flag = False (*** NOTE: flag = false is just to avoid the automatic removing of the flag by IMITATOR… ***) do {cl := 0, flag := True} goto l6;

(* Abstraction of  private static void checkChar(String candidate, int charNumber) { *)
loc l6: invariant cl <= (*delay * *)5000000 first_mismatch
		(*** NOTE: IMITATOR does not allow constant * parameter :( ***)
	when cl = (*delay * *)5000000 first_mismatch do {cl := 0} goto l7;

(*  delay(); *)
loc l7: invariant cl <= delay + epsilon
	when delay - epsilon <= cl & cl <= delay + epsilon do {cl := 0} goto l8;

(* close server *)
loc l8: invariant cl <= epsilon
	when epsilon <= cl & cl <= epsilon & abs_clock = abs_ptime do {cl := 0} goto final2;

loc final2: invariant True

end (* template pta *)

instantiate pta_1 := pta(flag_1, cl_1, xnonletters_1, userInput_length_1, first_mismatch_1);
instantiate pta_2 := pta(flag_2, cl_2, xnonletters_2, userInput_length_2, first_mismatch_2);

(************************************************************)
(* Initial state *)
(************************************************************)
init := {

    discrete =
		(*------------------------------------------------------------*)
		(* Initial location *)
		(*------------------------------------------------------------*)
		loc[pta_1] := l1,
		loc[pta_2] := l1,

		(*------------------------------------------------------------*)
		(* Initial discrete variables assignments *)
		(*------------------------------------------------------------*)
		flag_1 := False,
		flag_2 := False,

    ;

    continuous =
		(*------------------------------------------------------------*)
		(* Initial clock constraints *)
		(*------------------------------------------------------------*)
 	& cl_1 = 0
 	& cl_2 = 0
 	& abs_clock = 0

		(*------------------------------------------------------------*)
		(* Parameter constraints *)
		(*------------------------------------------------------------*)
	& abs_ptime >= 0

	& userInput_length_1 >= 0
	& first_mismatch_1 >= 0 & first_mismatch_1 <= maxInputLen
	& xnonletters_1 >= 0

	& userInput_length_2 >= 0
	& first_mismatch_2 >= 0 & first_mismatch_2 <= maxInputLen
	& xnonletters_2 >= 0

	& epsilon >= 0
	(* Quite arbitrary *)
	& epsilon <= 1

	;
}


(************************************************************)
(* The end *)
(************************************************************)
end
