(************************************************************
 *                      IMITATOR MODEL                      
 *
 * Testing various operations on discrete
 *
 * Description     : Bug Test
 * Correctness     : N/A
 * Source          : Own work
 * Author          : Étienne André, Jawher Jerray
 * Modeling        : Étienne André, Jawher Jerray
 * Input by        : Jawher Jerray, Étienne André
 * License         : Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
 *
 * Created         : 2018/05/16
 * Last modified   : 2018/05/17
 *
 * IMITATOR version: 2.10.2
 ************************************************************)

var

(* Clocks *)
	x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x, y, z
	: clock;

(* Discrete *)
	i,
		: discrete;

(* Parameters *)
	p,
		: parameter;



(************************************************************)
  automaton autom
(************************************************************)
synclabs: a;

urgent loc idle: invariant True
	when True sync a do {
		x1 := 2x + 5 + 6 + -4 * 2 * 8 + 4x + 2 *(2y+3y),
		x2 := 2x + 5 + 6 + -(4 * 2) * 8 + 4x + 2 *(2y+3y),
		x3 := 2x - 1 + 2 * 3 + 1y + 3x,
		x4 := 2x - x + 3 - 2 * 2,
		x5 := -(4 + 2),
		x6 := 2 * (x + 1) + 3 * (2 + 1),
		x7 := -(5 * 2) - 3x + 8 * (6 + 1 - 2 + 3y) - y - (-5), 
		x8 := -(8 / 2 + 2x) * (3 + -(9)),
		x9 := 1 + (2 - 3) + 3x - 2y * (5 + 2 - 1) - x + z * (2 * 2) + 5 * 4 * 2 + 1
	} goto idle;

end (* pta *)

(************************************************************)
(* Initial state *)
(************************************************************)

init :=
	(*------------------------------------------------------------*)
	(* Initial location *)
	(*------------------------------------------------------------*)
	& loc[autom] = idle


	(*------------------------------------------------------------*)
	(* Initial clock assignment *)
	(*------------------------------------------------------------*)
	& x = 0
	& y = 0

	(*------------------------------------------------------------*)
	(* Initial parameter constraint *)
	(*------------------------------------------------------------*)
	& p >= 0

	(*------------------------------------------------------------*)
	(* Initial discrete assignments *)
	(*------------------------------------------------------------*)
	& i = 1

;


(************************************************************)
(* The end *)
(************************************************************)
end
