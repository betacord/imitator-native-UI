(************************************************************
 *                                IMITATOR MODEL
 *
 * Title            : Evaluation order of discrete sequential and constraint updates
 * Description      : Test that sequential update is evaluated sequentially following the declaration order of PTAs, and finally all the constraints are updated at the same time
 * Correctness      : N/A
 * Scalable         : no
 * Generated        : no
 * Categories       : TBD
 * Source           : Own work
 * bibkey           :
 * Author           : B.L
 * Modeling         : B.L
 * Input by         : B.L
 * License          : Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
 *
 * Created          : 2022/03/17
 * Last modified    : 2022/08/30
 * Model version    : 1.1
 *
 * IMITATOR version : 3.3
 ************************************************************)
var

  s : rat stack;
  top1, top2, top3 : rat;

  r1, r2, r3 : rat;

  x, y, z : clock;

(************************************************************)
 automaton pta1
(************************************************************)
synclabs : a;

loc l1: invariant x <= 0
	when
    & True
  do {
    mix
        stack_push(0, s);
        r1 := 1;
        r2 := 2;
        r3 := 3;
        x := r1 + r2 + r3; (* x = 6 *)
        top1 := stack_top(s);
  }
  sync a
  goto lend;


accepting loc lend: invariant True
 end (* pta *)
(************************************************************)

(************************************************************)
 automaton pta2
(************************************************************)
synclabs : a;
loc l1: invariant True
	when
    & True
  do {
    mix
        stack_push(1, s);
        r1 := 0;
        y := r1 + r2 + r3; (* y = 5 *)
        z := x - 1; (* z = 5 *)
        top2 := stack_top(s);
    end
  }
  sync a
  goto lend;


accepting loc lend: invariant True
 end (* pta *)
(************************************************************)

#include "./compound-updates-order-pta3-include.imi";

(************************************************************)
(* Initial state *)
(************************************************************)

init :=
      loc[pta1] = l1
      & loc[pta2] = l1
      & loc[pta3] = l1
      & x >= 0
      & y >= 0
      & z >= 0
;


(************************************************************)
(* The end *)
(************************************************************)
end
