(************************************************************
 *                                IMITATOR MODEL
 *
 * Title            : Toy model to test the discrete/continuous updates
 * Description      : Toy model to test the discrete/continuous updates
 * Correctness      : N/A
 * Scalable         : no
 * Generated        : no
 * Categories       : TBD
 * Source           : Own work
 * bibkey           : 
 * Author           : Benjamin Loillier
 * Modeling         : Benjamin Loillier
 * Input by         : Benjamin Loillier, Étienne André
 * License          : Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
 *
 * Created          : 2022/07/12
 * Last modified    : 2022/07/12
 * Model version    : 0.1
 *
 * IMITATOR version : 3.3
 ************************************************************)

var

(* Clocks *)
 	x,
		: clock;

(* Discrete *)
	s : int stack;
	r1 : int;
	r2 : int;
	r3 : int;
	i  : rational;


(************************************************************)
automaton pta1
(************************************************************)
synclabs : a;

loc l1: invariant x <= 0
when True
do {
	seq
		stack_push(0, s);
		i := 1;
	then
		(* r1 = 1 and x = 2, because all seq updates in all IPTA are made before *)
		r1 := stack_top(s),
		x := i
	end
}
sync a goto lend;

accepting loc lend: invariant True
end (* pta *)
(************************************************************)

(************************************************************)
automaton pta2
(************************************************************)
synclabs : a;
loc l1: invariant True
when
& True
do {
	seq
		i := 2;
		stack_push(1, s);
	then
		(* r2 = 1, because all seq updates in all IPTA are made before *)
		r2 := stack_top(s)
	end
}
sync a goto lend;

accepting loc lend: invariant True
end (* pta *)
(************************************************************)

(************************************************************)
automaton pta3
(************************************************************)
synclabs : a;
loc l1: invariant True
when
& True
do {
	(* r3 = 1, because all seq updates in all IPTA are made before *)
	r3 := stack_top(s)
}
sync a goto lend;

accepting loc lend: invariant True
end (* pta *)

(************************************************************)
(* Initial state *)
(************************************************************)

init := {
	
    discrete =
		(*------------------------------------------------------------*)
		(* Initial location *)
		(*------------------------------------------------------------*)
		loc[pta1] := l1,
		loc[pta2] := l1,
		loc[pta3] := l1,

		(*------------------------------------------------------------*)
		(* Initial discrete variables assignments *)
		(*------------------------------------------------------------*)
		s := stack(),
		r1 := 0,
		r2 := 0,
		r3 := 0,
		i := 0,

    ;

    continuous =        
		(*------------------------------------------------------------*)
		(* Initial clock constraints *)
		(*------------------------------------------------------------*)
		& x = 0

	;
}


(************************************************************)
(* The end *)
(************************************************************)
end

