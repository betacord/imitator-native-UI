(************************************************************
 *                                IMITATOR MODEL
 *
 * Title            : Check expression reduce on clock updates
 * Description      : Check expression reduce on clock updates
 * Correctness      : True
 * Scalable         : No
 * Generated        : No
 * Categories       : Reduce, Clock, Semantic
 * Source           :
 * bibkey           :
 * Author           : Benjamin L.
 * Modeling         : Benjamin L.
 * Input by         : Benjamin L.
 * License          : Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
 *
 * Created          : 2023/01/17
 * Last modified    : 2023/01/17
 * Model version    : 1.0
 *
 * IMITATOR version : 3.4
 ************************************************************)
var

  i1, i2, i3 : int;
  r1, r2, a, b, c, d, e : rat;
  x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x, y, z, w : clock;

function f(a : int, b : int) : rational 
begin 
  return rational_of_int(a * b);
end 

(************************************************************)
 automaton pta1
(************************************************************)
synclabs : a;
loc l1: invariant True

	when True do {
    x1 := 2 * (rational_of_int(i1 * i1) + 3) + 3 * (y + 4 + 2 * (1 + 3 + 2y));
    x2 := 1 - 1 + 2x + 1x + 1y - 1y;
    x3 := 2 / rational_of_int(i1);
    x4 := rational_of_int(i1) / 2;
    x5 := 1 / (r1 * r2);
    (* x6 := x * 2 + 1 * 5 / 3 * 4 + 4x / (r1 * r2 + rational_of_int(i1) * (8x + 5 + 2 * r1 - 1 + x)) + x; *)
    x7 := 2 * (-2 - r1);
    x8 := (2 * a * b) * (2 * c * d);
    x9 := 2 * (a * b) + 2 * (a * b);
    x10 := 2 * (2 * (4x + 2y) - 3 * (4x + 2y)) + 1x + 1y;
    x11 := (2x + 3y) - (4x + 2y);
    x12 := (2x - 3y) - (4x - 2y);
  }
  sync a
  goto lend;


accepting loc lend: invariant True

 end (* pta *)
(************************************************************)

(************************************************************)
(* Initial state *)
(************************************************************)


init := {

    continuous =
      x >= 1
    ;

    discrete =
        loc[pta1] := l1,
        r1 := 1,
        r2 := 2,
        i1 := 1,
        i2 := 1
    ;

}



(************************************************************)
(* The end *)
(************************************************************)
end
