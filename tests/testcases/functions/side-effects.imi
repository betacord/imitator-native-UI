(************************************************************
 *                                IMITATOR MODEL
 *
 * Title            : Test new user defined functions and types
 * Description      : Test new user defined functions and types: side-effects, clock updates
 * Correctness      : N/A
 * Scalable         : no
 * Generated        : no
 * Categories       : TBD
 * Source           : Own work
 * bibkey           : 
 * Author           : Étienne André
 * Modeling         : Étienne André
 * Input by         : Étienne André
 * License          : Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
 *
 * Created          : 2023/03/09
 * Last modified    : 2023/03/13
 * Model version    : 0.1
 *
 * IMITATOR version : 3.4-beta
 ************************************************************)

var

(* Clocks *)
 	x,
		: clock;

(* Discrete *)
	i, j,
		: int;
	r,
		: rational;
	t : int array(4);

(* Parameters *)
	p,
		: parameter;


(************************************************************)
  function test_over(i : int) : void
(************************************************************)
begin
	var i : int = -1;
	(* This is the LOCAL `i`, the argument `i` isn't modified, neither is the global variable `i` *)
	i := 1;
	j := i;
end


(************************************************************)
  function test_clock_updates() : void
(************************************************************)
begin
	for i from 1 to 10 do
		x := x + p;
	done
end


(************************************************************)
  function no_side_effect(local_t_useless : int array(4)) : bool
(************************************************************)
begin
	return t[0] = 1;
end

(************************************************************)
  function yes_side_effect(local_t : int array(4)) : void
(************************************************************)
begin
	(* Modifying local variable, WITH side effects! *)
	local_t[0] := 10;
	(* Modifying global variable *)
	t[1] := 10;
end

(************************************************************)
  automaton pta
(************************************************************)
actions: a;

loc l1: invariant True
	when j <> -1 & i <> -1 & x = 0 do {i := i; test_over(i)} goto l2;

loc l2: invariant True
	when x = 0 & no_side_effect(t) do {test_clock_updates(); yes_side_effect(t)} goto l3;

loc l3: invariant True

end (* pta *)



(************************************************************)
(* Initial state *)
(************************************************************)

init := {
	
    discrete =
		(*------------------------------------------------------------*)
		(* Initial location *)
		(*------------------------------------------------------------*)
		loc[pta] := l1,

		(*------------------------------------------------------------*)
		(* Initial discrete variables assignments *)
		(*------------------------------------------------------------*)
		i := 0,
		j := 0,
		t := [1,2,3,4],

    ;

    continuous =        
		(*------------------------------------------------------------*)
		(* Initial clock constraints *)
		(*------------------------------------------------------------*)
		& x = 0

		(*------------------------------------------------------------*)
		(* Parameter constraints *)
		(*------------------------------------------------------------*)
		& p >= 0
	;
}


(************************************************************)
(* The end *)
(************************************************************)
end
