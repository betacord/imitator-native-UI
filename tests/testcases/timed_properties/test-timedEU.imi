(************************************************************
 *                                IMITATOR MODEL
 *
 * Title            : Toy model to test EU[…]
 * Description      : Toy model to test EU[…]
 * Correctness      :
 * Scalable         : no
 * Generated        : no
 * Categories       :
 * Source           : Own work
 * bibkey           : 
 * Author           : Étienne André
 * Modeling         : Étienne André
 * Input by         : Étienne André
 * License          : Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
 *
 * Created          : 2024/02/29
 * Last modified    : 2024/02/29
 * Model version    : 0.1
 *
 * IMITATOR version : 3.4-beta
 ************************************************************)


var

(* Clocks *)
 	x, global_time,
		: clock;

(* Parameters *)
	p,
		: parameter;

(* Int *)
	i, j,
		: int;



(************************************************************)
  automaton pta
(************************************************************)
actions: a;

loc l1: invariant x <= 6 & i >= 0 & j >= 0 (*** HACK to avoid variable auto-removal ***)
	when x = 0 & p = 0 goto lF;
	when x = 1 & p = 1 do {j := 1} goto lF;
	when x = 2 do {i := 1} goto l2;
	when x = 3 & p = 3 do {j := 1} goto lF;
	when x = 4 & p = 4 do {i := 1; j := 1} goto lF;
	when x = 5 & p = 5 do {j := 1} goto lF;
	when x = 6 do {i := 1} goto l2;

loc l2: invariant True
	when x = 7 & p = 7 do {j := 1} goto lF;

accepting loc lF: invariant True
end (* pta *)



(************************************************************)
(* Initial state *)
(************************************************************)

init := {
	
    discrete =
		(*------------------------------------------------------------*)
		(* Initial location *)
		(*------------------------------------------------------------*)
		loc[pta] := l1,

		(*------------------------------------------------------------*)
		(* Initial discrete variables assignments *)
		(*------------------------------------------------------------*)
		i := 0,
		j := 0,
    ;

    continuous =        
		(*------------------------------------------------------------*)
		(* Initial clock constraints *)
		(*------------------------------------------------------------*)
		& x = 0
		& global_time = 0

		(*------------------------------------------------------------*)
		(* Parameter constraints *)
		(*------------------------------------------------------------*)
		& p >= 0
	;
}


(************************************************************)
(* The end *)
(************************************************************)
end
